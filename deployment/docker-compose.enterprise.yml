version: '3.8'

services:
  # Load Balancer
  nginx:
    image: nginx:alpine
    container_name: phantom-ml-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - phantom-ml-api-1
      - phantom-ml-api-2
      - phantom-ml-api-3
    networks:
      - phantom-network
    restart: unless-stopped

  # ML API Instances (High Availability)
  phantom-ml-api-1:
    build: .
    container_name: phantom-ml-api-1
    environment:
      - NODE_ENV=production
      - PORT=8000
      - INSTANCE_ID=1
      - DATABASE_URL=postgresql://phantom:${DB_PASSWORD}@postgres-primary:5432/phantom_ml
      - REDIS_URL=redis://redis-master:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - MULTI_TENANT_ENABLED=true
      - AUDIT_LOGGING_ENABLED=true
      - ENTERPRISE_FEATURES=true
    volumes:
      - ml-models:/app/models
      - ml-logs:/app/logs
      - ./ssl:/app/ssl
    networks:
      - phantom-network
    depends_on:
      - postgres-primary
      - redis-master
      - elasticsearch
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  phantom-ml-api-2:
    build: .
    container_name: phantom-ml-api-2
    environment:
      - NODE_ENV=production
      - PORT=8000
      - INSTANCE_ID=2
      - DATABASE_URL=postgresql://phantom:${DB_PASSWORD}@postgres-primary:5432/phantom_ml
      - REDIS_URL=redis://redis-master:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - MULTI_TENANT_ENABLED=true
      - AUDIT_LOGGING_ENABLED=true
      - ENTERPRISE_FEATURES=true
    volumes:
      - ml-models:/app/models
      - ml-logs:/app/logs
      - ./ssl:/app/ssl
    networks:
      - phantom-network
    depends_on:
      - postgres-primary
      - redis-master
      - elasticsearch
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  phantom-ml-api-3:
    build: .
    container_name: phantom-ml-api-3
    environment:
      - NODE_ENV=production
      - PORT=8000
      - INSTANCE_ID=3
      - DATABASE_URL=postgresql://phantom:${DB_PASSWORD}@postgres-primary:5432/phantom_ml
      - REDIS_URL=redis://redis-master:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - MULTI_TENANT_ENABLED=true
      - AUDIT_LOGGING_ENABLED=true
      - ENTERPRISE_FEATURES=true
    volumes:
      - ml-models:/app/models
      - ml-logs:/app/logs
      - ./ssl:/app/ssl
    networks:
      - phantom-network
    depends_on:
      - postgres-primary
      - redis-master
      - elasticsearch
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database Primary (PostgreSQL)
  postgres-primary:
    image: postgres:15-alpine
    container_name: postgres-primary
    environment:
      - POSTGRES_DB=phantom_ml
      - POSTGRES_USER=phantom
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_REPLICATION_MODE=master
      - POSTGRES_REPLICATION_USER=replicator
      - POSTGRES_REPLICATION_PASSWORD=${REPLICATION_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf
    ports:
      - "5432:5432"
    networks:
      - phantom-network
    restart: unless-stopped
    command: postgres -c config_file=/etc/postgresql/postgresql.conf

  # Database Replica (PostgreSQL)
  postgres-replica:
    image: postgres:15-alpine
    container_name: postgres-replica
    environment:
      - POSTGRES_DB=phantom_ml
      - POSTGRES_USER=phantom
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_REPLICATION_MODE=slave
      - POSTGRES_REPLICATION_USER=replicator
      - POSTGRES_REPLICATION_PASSWORD=${REPLICATION_PASSWORD}
      - POSTGRES_MASTER_SERVICE=postgres-primary
    volumes:
      - postgres-replica-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - phantom-network
    depends_on:
      - postgres-primary
    restart: unless-stopped

  # Redis Master
  redis-master:
    image: redis:7-alpine
    container_name: redis-master
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --replica-announce-ip redis-master
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - phantom-network
    restart: unless-stopped

  # Redis Replica
  redis-replica:
    image: redis:7-alpine
    container_name: redis-replica
    command: redis-server --slaveof redis-master 6379 --masterauth ${REDIS_PASSWORD} --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-replica-data:/data
    ports:
      - "6380:6379"
    networks:
      - phantom-network
    depends_on:
      - redis-master
    restart: unless-stopped

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: elasticsearch
    environment:
      - cluster.name=phantom-ml-cluster
      - node.name=elasticsearch
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - phantom-network
    restart: unless-stopped
    ulimits:
      memlock:
        soft: -1
        hard: -1

  # Kibana for log analysis
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
    ports:
      - "5601:5601"
    networks:
      - phantom-network
    depends_on:
      - elasticsearch
    restart: unless-stopped

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - phantom-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=postgres-primary:5432
      - GF_DATABASE_NAME=phantom_ml
      - GF_DATABASE_USER=phantom
      - GF_DATABASE_PASSWORD=${DB_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    networks:
      - phantom-network
    depends_on:
      - prometheus
      - postgres-primary
    restart: unless-stopped

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    networks:
      - phantom-network
    restart: unless-stopped

  # Vault for secrets management
  vault:
    image: vault:latest
    container_name: vault
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=${VAULT_TOKEN}
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    volumes:
      - vault-data:/vault/data
      - ./vault/config:/vault/config
    ports:
      - "8200:8200"
    networks:
      - phantom-network
    restart: unless-stopped
    cap_add:
      - IPC_LOCK

  # MinIO for object storage
  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
      - minio-data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - phantom-network
    restart: unless-stopped
    command: server /data --console-address ":9001"

volumes:
  postgres-data:
    driver: local
  postgres-replica-data:
    driver: local
  redis-data:
    driver: local
  redis-replica-data:
    driver: local
  elasticsearch-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  vault-data:
    driver: local
  minio-data:
    driver: local
  ml-models:
    driver: local
  ml-logs:
    driver: local

networks:
  phantom-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
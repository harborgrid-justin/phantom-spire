apiVersion: v1
kind: Namespace
metadata:
  name: phantom-ml-enterprise
  labels:
    name: phantom-ml-enterprise
    environment: production
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: phantom-ml-api
  namespace: phantom-ml-enterprise
  labels:
    app: phantom-ml-api
    tier: backend
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: phantom-ml-api
  template:
    metadata:
      labels:
        app: phantom-ml-api
        tier: backend
    spec:
      containers:
      - name: phantom-ml-api
        image: phantom-spire/ml-core:enterprise
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
        - containerPort: 9000
          name: metrics
        env:
        - name: NODE_ENV
          value: "production"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: phantom-ml-secrets
              key: database_url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: phantom-ml-secrets
              key: redis_url
        - name: ELASTICSEARCH_URL
          valueFrom:
            secretKeyRef:
              name: phantom-ml-secrets
              key: elasticsearch_url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: phantom-ml-secrets
              key: jwt_secret
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: phantom-ml-secrets
              key: encryption_key
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: model-storage
          mountPath: /app/models
        - name: log-storage
          mountPath: /app/logs
        - name: tls-certs
          mountPath: /app/certs
          readOnly: true
      volumes:
      - name: model-storage
        persistentVolumeClaim:
          claimName: phantom-ml-models-pvc
      - name: log-storage
        persistentVolumeClaim:
          claimName: phantom-ml-logs-pvc
      - name: tls-certs
        secret:
          secretName: phantom-ml-tls
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      serviceAccountName: phantom-ml-service
---
apiVersion: v1
kind: Service
metadata:
  name: phantom-ml-service
  namespace: phantom-ml-enterprise
  labels:
    app: phantom-ml-api
spec:
  selector:
    app: phantom-ml-api
  ports:
  - name: http
    port: 80
    targetPort: 8000
    protocol: TCP
  - name: metrics
    port: 9000
    targetPort: 9000
    protocol: TCP
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: phantom-ml-ingress
  namespace: phantom-ml-enterprise
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
spec:
  tls:
  - hosts:
    - api.phantom-ml.enterprise.com
    secretName: phantom-ml-tls
  rules:
  - host: api.phantom-ml.enterprise.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: phantom-ml-service
            port:
              number: 80
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: phantom-ml-service
  namespace: phantom-ml-enterprise
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: phantom-ml-enterprise
  name: phantom-ml-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: phantom-ml-rolebinding
  namespace: phantom-ml-enterprise
subjects:
- kind: ServiceAccount
  name: phantom-ml-service
  namespace: phantom-ml-enterprise
roleRef:
  kind: Role
  name: phantom-ml-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: phantom-ml-models-pvc
  namespace: phantom-ml-enterprise
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 100Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: phantom-ml-logs-pvc
  namespace: phantom-ml-enterprise
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: standard
  resources:
    requests:
      storage: 50Gi
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: phantom-ml-hpa
  namespace: phantom-ml-enterprise
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: phantom-ml-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: phantom-ml-pdb
  namespace: phantom-ml-enterprise
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: phantom-ml-api
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: phantom-ml-network-policy
  namespace: phantom-ml-enterprise
spec:
  podSelector:
    matchLabels:
      app: phantom-ml-api
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8000
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9000
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
    - protocol: TCP
      port: 9200  # Elasticsearch
    - protocol: TCP
      port: 443   # HTTPS
    - protocol: TCP
      port: 53    # DNS
    - protocol: UDP
      port: 53    # DNS
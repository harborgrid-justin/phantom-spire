// Shared data models and types
use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize};

// Enhanced types for threat intelligence
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SearchCriteria {
    pub cve_id: Option<String>,
    pub vendor: Option<String>,
    pub product: Option<String>,
    pub severity_min: Option<f64>,
    pub severity_max: Option<f64>,
    pub exploit_available: Option<bool>,
    pub in_the_wild: Option<bool>,
    pub date_range: Option<(DateTime<Utc>, DateTime<Utc>)>,
    pub tags: Vec<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ExploitTimeline {
    pub cve_id: String,
    pub disclosure_date: DateTime<Utc>,
    pub first_exploit_date: Option<DateTime<Utc>>,
    pub weaponization_date: Option<DateTime<Utc>>,
    pub mass_exploitation_date: Option<DateTime<Utc>>,
    pub patch_available_date: Option<DateTime<Utc>>,
    pub exploitation_stages: Vec<ExploitationStage>,
    pub risk_progression: Vec<RiskTimepoint>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ExploitationStage {
    pub stage: String,
    pub date: DateTime<Utc>,
    pub description: String,
    pub threat_actors: Vec<String>,
    pub tools_used: Vec<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct RiskTimepoint {
    pub date: DateTime<Utc>,
    pub risk_score: f64,
    pub exploitation_likelihood: f64,
    pub impact_magnitude: f64,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct RemediationStrategy {
    pub cve_id: String,
    pub priority: RemediationPriority,
    pub immediate_actions: Vec<RemediationAction>,
    pub short_term_actions: Vec<RemediationAction>,
    pub long_term_actions: Vec<RemediationAction>,
    pub compensating_controls: Vec<CompensatingControl>,
    pub estimated_effort: EstimatedEffort,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum RemediationPriority {
    Critical,
    High,
    Medium,
    Low,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct RemediationAction {
    pub action_type: String,
    pub description: String,
    pub estimated_time: String,
    pub resources_required: Vec<String>,
    pub dependencies: Vec<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct CompensatingControl {
    pub control_type: String,
    pub description: String,
    pub effectiveness: f64,
    pub implementation_cost: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EstimatedEffort {
    pub hours: u32,
    pub cost: Option<f64>,
    pub complexity: String,
    pub skills_required: Vec<String>,
}

// Threat Intelligence auxiliary types
#[derive(Debug, Clone)]
pub struct ThreatFeed {
    pub id: String,
    pub name: String,
    pub reliability: f64,
    pub last_updated: DateTime<Utc>,
    pub feed_type: String,
}

#[derive(Debug, Clone)]
pub struct CorrelationRule {
    pub id: String,
    pub name: String,
    pub conditions: Vec<String>,
    pub confidence_boost: f64,
}

#[derive(Debug, Clone)]
pub struct ScoringModel {
    pub name: String,
    pub weight: f64,
    pub factors: Vec<String>,
}

#[derive(Debug, Clone)]
pub struct PredictionModel {
    pub model_type: String,
    pub accuracy: f64,
    pub last_trained: DateTime<Utc>,
}

#[derive(Debug, Clone)]
pub struct RemediationTemplate {
    pub vulnerability_pattern: String,
    pub actions: Vec<RemediationAction>,
    pub success_rate: f64,
}

// Core CVE types
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum CVSSVersion {
    #[serde(rename = "2.0")]
    V2,
    #[serde(rename = "3.0")]
    V3,
    #[serde(rename = "3.1")]
    V31,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum CVSSSeverity {
    None,
    Low,
    Medium,
    High,
    Critical,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum CVSSAttackVector {
    Network,
    Adjacent,
    Local,
    Physical,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct CVSSMetrics {
    pub version: CVSSVersion,
    pub base_score: f64,
    pub severity: CVSSSeverity,
    pub attack_vector: CVSSAttackVector,
    pub attack_complexity: String,
    pub privileges_required: String,
    pub user_interaction: String,
    pub scope: String,
    pub confidentiality_impact: String,
    pub integrity_impact: String,
    pub availability_impact: String,
    pub exploitability_score: Option<f64>,
    pub impact_score: Option<f64>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct CWE {
    pub id: String,
    pub name: String,
    pub description: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct AffectedProduct {
    pub vendor: String,
    pub product: String,
    pub version: String,
    pub version_start_including: Option<String>,
    pub version_end_including: Option<String>,
    pub version_start_excluding: Option<String>,
    pub version_end_excluding: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Reference {
    pub url: String,
    pub source: String,
    pub tags: Vec<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct CVE {
    pub id: String,
    pub description: String,
    pub published_date: DateTime<Utc>,
    pub last_modified_date: DateTime<Utc>,
    pub cvss_metrics: Option<CVSSMetrics>,
    pub cwe: Option<CWE>,
    pub affected_products: Vec<AffectedProduct>,
    pub references: Vec<Reference>,
    pub status: String,
    pub assigner: String,
    pub tags: Vec<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VulnerabilityAssessment {
    pub exploitability: f64,
    pub impact_score: f64,
    pub risk_level: String,
    pub affected_systems: Vec<String>,
    pub remediation_priority: u32,
    pub exploit_available: bool,
    pub public_exploits: bool,
    pub in_the_wild: bool,
    pub recommendations: Vec<String>,
    pub mitigation_steps: Vec<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct CVEAnalysisResult {
    pub cve: CVE,
    pub assessment: VulnerabilityAssessment,
    pub processing_timestamp: DateTime<Utc>,
    pub related_cves: Vec<String>,
    pub threat_actors: Vec<String>,
    pub campaigns: Vec<String>,
}

// Internal helper types for analysis flow (crate-visible)
#[derive(Debug, Clone)]
pub(crate) struct TargetProfile {
    pub(crate) high_value_targets: bool,
    pub(crate) widespread_deployment: bool,
}

#[derive(Debug, Clone)]
pub(crate) struct ExploitStatus {
    pub(crate) exploit_available: bool,
    pub(crate) public_exploits: bool,
    pub(crate) in_the_wild: bool,
}

#[derive(Debug, Clone)]
pub(crate) struct BasicTimeline {
    pub(crate) has_public_exploits: bool,
}

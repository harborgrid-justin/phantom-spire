name: 'CI/CD - Build, Test & Publish'

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]

env:
  DEBUG: napi:*
  APP_NAME: phantom-core-threat-actor
  MACOSX_DEPLOYMENT_TARGET: '10.13'

permissions:
  contents: read
  id-token: write

jobs:
  changes:
    if: false  # Disabled - building locally instead
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      rust: ${{ steps.changes.outputs.rust }}
      workflow: ${{ steps.changes.outputs.workflow }}
      all: ${{ steps.changes.outputs.all }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            rust:
              - 'src/**'
              - 'examples/**'
              - 'Cargo.toml'
              - 'Cargo.lock'
              - 'build.rs'
              - '*.rs'
            workflow:
              - '.github/workflows/**'
            all:
              - '**'

  lint:
    if: false  # Disabled - building locally instead
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          check-latest: true
          cache: npm
      - name: Install dependencies
        run: |
          npm cache clean --force
          npm install --no-save --no-package-lock --registry https://registry.npmjs.org/ @napi-rs/cli@3.2.0
          npm install --no-save --no-package-lock --registry https://registry.npmjs.org/ rimraf@5.0.5
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Cargo fmt
        run: cargo fmt --all -- --check
      - name: Clippy
        run: cargo clippy --all-features --all-targets -- -D warnings

  build-core:
    needs: changes
    if: false  # Disabled - building locally instead
    strategy:
      fail-fast: false
      matrix:
        settings:
          # Core platforms - always build when needed
          - host: windows-latest
            build: npx @napi-rs/cli build --target x86_64-pc-windows-msvc --release --features napi
            target: x86_64-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: |-
              set -e &&
              npx @napi-rs/cli build --target x86_64-unknown-linux-gnu --release --features napi &&
              strip *.node
          - host: macos-latest
            target: x86_64-apple-darwin
            build: npx @napi-rs/cli build --target x86_64-apple-darwin --release --features napi
    name: Build Core - ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 20
          check-latest: true
          cache: npm
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Install dependencies
        run: |
          npm cache clean --force
          npm install --no-save --no-package-lock --registry https://registry.npmjs.org/ @napi-rs/cli@3.2.0
          npm install --no-save --no-package-lock --registry https://registry.npmjs.org/ rimraf@5.0.5
      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: '--user 0:0 -v ${{ github.workspace }}:/build -w /build'
          run: |
            set -e
            npm cache clean --force
            npm install --no-save --no-package-lock --registry https://registry.npmjs.org/ @napi-rs/cli@3.2.0
            npm install --no-save --no-package-lock --registry https://registry.npmjs.org/ rimraf@5.0.5
            npx @napi-rs/cli build --target ${{ matrix.settings.target }} --release --features napi
            if [ "${{ matrix.settings.target }}" = "x86_64-unknown-linux-gnu" ]; then strip *.node; fi
      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ${{ env.APP_NAME }}.*.node
          if-no-files-found: error

  build-extended:
    needs: changes
    if: false  # Disabled - building locally instead
    strategy:
      fail-fast: false
      matrix:
        settings:
          # Extended platforms - only when Rust code changes
          - host: ubuntu-latest
            target: x86_64-pc-windows-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
    name: Build Extended - ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 20
          check-latest: true
          cache: npm
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: '--user 0:0 -v ${{ github.workspace }}:/build -w /build'
          run: |
            set -e
            npm cache clean --force
            npm install --no-save --no-package-lock --registry https://registry.npmjs.org/ @napi-rs/cli@3.2.0
            npm install --no-save --no-package-lock --registry https://registry.npmjs.org/ rimraf@5.0.5
            npx @napi-rs/cli build --target x86_64-pc-windows-gnu --release --features napi
            strip *.node
      - name: Build
        run: npx @napi-rs/cli build --target ${{ matrix.settings.target }} --release --features napi
        if: ${{ !matrix.settings.docker }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ${{ env.APP_NAME }}.*.node
          if-no-files-found: error

  test-macOS-windows-binding:
    if: false  # Disabled - building locally instead
    name: Test bindings on ${{ matrix.settings.host }} - node@${{ matrix.node }}
    needs:
      - build-core
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: 'x86_64-apple-darwin'
          - host: windows-latest
            target: 'x86_64-pc-windows-msvc'
        node: ['18', '20', '22']
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          check-latest: true
          cache: npm
      - name: Install dependencies
        run: |
          npm cache clean --force
          npm install --no-save --no-package-lock --registry https://registry.npmjs.org/ @napi-rs/cli@3.2.0
          npm install --no-save --no-package-lock --registry https://registry.npmjs.org/ rimraf@5.0.5
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: .
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        run: npm test

  test-linux-x64-gnu-binding:
    if: false  # Disabled - building locally instead
    name: Test bindings on Linux-x64-gnu - node@${{ matrix.node }}
    needs:
      - build-core
    strategy:
      fail-fast: false
      matrix:
        node: ['18', '20', '22']
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          check-latest: true
          cache: yarn
      - name: Install dependencies
        run: yarn install
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-x86_64-unknown-linux-gnu
          path: .
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        run: docker run --rm -v $(pwd):/build -w /build node:${{ matrix.node }}-slim npm test

  publish:
    if: false  # Disabled - building locally instead, using automated-release.yml for publishing
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - lint
      - test-macOS-windows-binding
      - test-linux-x64-gnu-binding
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          check-latest: true
          cache: npm
      - name: Install dependencies
        run: |
          npm cache clean --force
          npm install --no-save --no-package-lock --registry https://registry.npmjs.org/ @napi-rs/cli@3.2.0
          npm install --no-save --no-package-lock --registry https://registry.npmjs.org/ rimraf@5.0.5
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Move artifacts
        run: npm run artifacts
      - name: List packages
        run: ls -R ./npm
        shell: bash
      - name: Publish
        run: |
          npm config set provenance true
          if git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+.[0-9]\+$";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --access public
          elif git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+.[0-9]\+";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --tag beta --access public
          elif git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+.[0-9]\+-alpha";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --tag alpha --access public
          else
            echo "Not a release, skipping publish"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}



'use client';

// Phantom Malware Core Management - Malware Analysis & Reverse Engineering
// Provides comprehensive GUI for malware analysis and reverse engineering capabilities

import React, { useState, useEffect } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Grid,
  Button,
  Alert,
  LinearProgress,
  Chip,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  CircularProgress,
  Tabs,
  Tab
} from '@mui/material';
import {
  BugReport as MalwareIcon,
  Science as AnalysisIcon,
  Memory as ReverseIcon,
  Category as FamilyIcon,
  Visibility as BehaviorIcon,
  Assessment as ReportIcon,
  CheckCircle as CheckCircleIcon,
  Warning as WarningIcon,
  ExpandMore as ExpandMoreIcon,
  Security as SecurityIcon,
  Speed as DynamicIcon,
  Code as StaticIcon
} from '@mui/icons-material';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';

// Interfaces
interface MalwareStatus {
  success: boolean;
  data?: {
    status: string;
    components: Record<string, any>;
    metrics: {
      uptime: string;
      samples_analyzed: number;
      detection_rate: number;
      family_classifications: number;
      sandbox_utilization: number;
    };
  };
}

interface MalwareAnalysis {
  analysis_id: string;
  malware_profile: {
    sample_hash: string;
    malware_family: string;
    threat_level: string;
    analysis_confidence: number;
  };
  behavioral_analysis: any;
  static_analysis: any;
  recommendations: string[];
}

// API functions
const fetchMalwareStatus = async (): Promise<MalwareStatus> => {
  const response = await fetch('/api/phantom-cores/malware?operation=status');
  return response.json();
};

const analyzeMalware = async (malwareData: any) => {
  const response = await fetch('/api/phantom-cores/malware', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      operation: 'analyze-malware',
      malwareData
    })
  });
  return response.json();
};

const classifyFamily = async (classificationData: any) => {
  const response = await fetch('/api/phantom-cores/malware', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      operation: 'classify-family',
      classificationData
    })
  });
  return response.json();
};

const reverseEngineer = async (reverseData: any) => {
  const response = await fetch('/api/phantom-cores/malware', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      operation: 'reverse-engineer',
      reverseData
    })
  });
  return response.json();
};

const generateMalwareReport = async (reportData: any) => {
  const response = await fetch('/api/phantom-cores/malware', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      operation: 'generate-malware-report',
      reportData
    })
  });
  return response.json();
};

// Component: Malware Overview
const MalwareOverview: React.FC<{ status: MalwareStatus | undefined }> = ({ status }) => {
  if (!status?.data) {
    return (
      <Alert severity="warning">Malware system status unavailable</Alert>
    );
  }

  const { metrics } = status.data;

  const getDetectionColor = (rate: number) => {
    if (rate >= 0.95) return 'success';
    if (rate >= 0.8) return 'warning';
    return 'error';
  };

  return (
    <Grid container spacing={2}>
      <Grid item xs={12} md={3}>
        <Card>
          <CardContent>
            <Typography variant="h6" gutterBottom>System Status</Typography>
            <Chip
              icon={status.data.status === 'operational' ? <CheckCircleIcon /> : <WarningIcon />}
              label={status.data.status}
              color={status.data.status === 'operational' ? 'success' : 'warning'}
            />
            <Typography variant="body2" color="textSecondary" mt={1}>
              Uptime: {metrics.uptime}
            </Typography>
          </CardContent>
        </Card>
      </Grid>

      <Grid item xs={12} md={3}>
        <Card>
          <CardContent>
            <Typography variant="h6" gutterBottom>Samples Analyzed</Typography>
            <Typography variant="h3" color="primary">
              {metrics.samples_analyzed.toLocaleString()}
            </Typography>
            <Typography variant="body2" color="textSecondary">
              Malware specimens
            </Typography>
          </CardContent>
        </Card>
      </Grid>

      <Grid item xs={12} md={3}>
        <Card>
          <CardContent>
            <Typography variant="h6" gutterBottom>Detection Rate</Typography>
            <Box display="flex" alignItems="center">
              <CircularProgress
                variant="determinate"
                value={metrics.detection_rate * 100}
                size={60}
                color={getDetectionColor(metrics.detection_rate)}
              />
              <Box ml={2}>
                <Typography variant="h4" color={getDetectionColor(metrics.detection_rate)}>
                  {(metrics.detection_rate * 100).toFixed(1)}%
                </Typography>
                <Typography variant="body2" color="textSecondary">
                  Detection Rate
                </Typography>
              </Box>
            </Box>
          </CardContent>
        </Card>
      </Grid>

      <Grid item xs={12} md={3}>
        <Card>
          <CardContent>
            <Typography variant="h6" gutterBottom>Malware Families</Typography>
            <Typography variant="h3" color="secondary">
              {metrics.family_classifications}
            </Typography>
            <Typography variant="body2" color="textSecondary">
              Classified families
            </Typography>
          </CardContent>
        </Card>
      </Grid>
    </Grid>
  );
};

// Component: Malware Analysis Panel
const MalwareAnalysisPanel: React.FC = () => {
  const [analysis, setAnalysis] = useState<MalwareAnalysis | null>(null);
  const [loading, setLoading] = useState(false);
  const [analysisType, setAnalysisType] = useState('comprehensive');
  const [sampleHash, setSampleHash] = useState('a1b2c3d4e5f6789...');

  const analysisTypes = ['comprehensive', 'static_only', 'dynamic_only', 'behavioral', 'reverse_engineering'];

  const runMalwareAnalysis = async () => {
    setLoading(true);
    try {
      const result = await analyzeMalware({
        sample_hash: sampleHash,
        analysis_type: analysisType,
        sandbox_environment: 'windows_10',
        analysis_timeout: 300,
        include_network_analysis: true,
        include_memory_analysis: true
      });
      setAnalysis(result.data);
    } catch (error) {
      console.error('Malware analysis failed:', error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Card>
      <CardContent>
        <Box display="flex" alignItems="center" justifyContent="space-between" mb={2}>
          <Typography variant="h6">Malware Analysis</Typography>
          <Box display="flex" alignItems="center" gap={2}>
            <TextField
              size="small"
              label="Sample Hash"
              value={sampleHash}
              onChange={(e) => setSampleHash(e.target.value)}
              sx={{ minWidth: 200 }}
            />
            <FormControl size="small" sx={{ minWidth: 150 }}>
              <InputLabel>Analysis Type</InputLabel>
              <Select
                value={analysisType}
                onChange={(e) => setAnalysisType(e.target.value)}
                label="Analysis Type"
              >
                {analysisTypes.map((type) => (
                  <MenuItem key={type} value={type}>
                    {type.replace(/_/g, ' ').toUpperCase()}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
            <Button
              variant="contained"
              startIcon={<MalwareIcon />}
              onClick={runMalwareAnalysis}
              disabled={loading}
            >
              Analyze
            </Button>
          </Box>
        </Box>

        {loading && <LinearProgress sx={{ mb: 2 }} />}

        {analysis && (
          <Box>
            <Grid container spacing={2} mb={2}>
              <Grid item xs={12} md={6}>
                <Paper sx={{ p: 2 }}>
                  <Typography variant="subtitle1" gutterBottom>Malware Profile</Typography>
                  <Typography variant="body2" mb={1}>
                    <strong>Sample Hash:</strong> {analysis.malware_profile.sample_hash}
                  </Typography>
                  <Typography variant="body2" mb={1}>
                    <strong>Malware Family:</strong> {analysis.malware_profile.malware_family}
                  </Typography>
                  <Typography variant="body2" mb={1}>
                    <strong>Threat Level:</strong>
                    <Chip
                      label={analysis.malware_profile.threat_level}
                      color={analysis.malware_profile.threat_level === 'HIGH' ? 'error' :
                             analysis.malware_profile.threat_level === 'MEDIUM' ? 'warning' : 'info'}
                      size="small"
                      sx={{ ml: 1 }}
                    />
                  </Typography>
                  <Box display="flex" alignItems="center" mb={1}>
                    <Typography variant="body2" mr={1}>
                      <strong>Analysis Confidence:</strong>
                    </Typography>
                    <Chip
                      label={`${(analysis.malware_profile.analysis_confidence * 100).toFixed(1)}%`}
                      color={analysis.malware_profile.analysis_confidence >= 0.8 ? 'success' :
                             analysis.malware_profile.analysis_confidence >= 0.6 ? 'warning' : 'error'}
                      size="small"
                    />
                  </Box>
                  <Typography variant="body2">
                    <strong>Analysis ID:</strong> {analysis.analysis_id}
                  </Typography>
                </Paper>
              </Grid>

              <Grid item xs={12} md={6}>
                <Paper sx={{ p: 2 }}>
                  <Typography variant="subtitle1" gutterBottom>Analysis Results</Typography>
                  <List dense>
                    <ListItem>
                      <ListItemIcon>
                        <SecurityIcon color="error" fontSize="small" />
                      </ListItemIcon>
                      <ListItemText
                        primary="Ransomware capabilities detected"
                        primaryTypographyProps={{ variant: 'body2' }}
                      />
                    </ListItem>
                    <ListItem>
                      <ListItemIcon>
                        <BehaviorIcon color="warning" fontSize="small" />
                      </ListItemIcon>
                      <ListItemText
                        primary="Persistence mechanisms identified"
                        primaryTypographyProps={{ variant: 'body2' }}
                      />
                    </ListItem>
                    <ListItem>
                      <ListItemIcon>
                        <DynamicIcon color="primary" fontSize="small" />
                      </ListItemIcon>
                      <ListItemText
                        primary="Command and control communication"
                        primaryTypographyProps={{ variant: 'body2' }}
                      />
                    </ListItem>
                    <ListItem>
                      <ListItemIcon>
                        <StaticIcon color="info" fontSize="small" />
                      </ListItemIcon>
                      <ListItemText
                        primary="Anti-analysis techniques employed"
                        primaryTypographyProps={{ variant: 'body2' }}
                      />
                    </ListItem>
                  </List>
                </Paper>
              </Grid>
            </Grid>

            <Paper sx={{ p: 2 }}>
              <Typography variant="subtitle1" gutterBottom>Analysis Recommendations</Typography>
              <List dense>
                {analysis.recommendations?.map((recommendation, index) => (
                  <ListItem key={index}>
                    <ListItemIcon>
                      <CheckCircleIcon color="primary" fontSize="small" />
                    </ListItemIcon>
                    <ListItemText
                      primary={recommendation}
                      primaryTypographyProps={{ variant: 'body2' }}
                    />
                  </ListItem>
                ))}
              </List>
            </Paper>
          </Box>
        )}
      </CardContent>
    </Card>
  );
};

// Component: Malware Operations Panel
const MalwareOperationsPanel: React.FC = () => {
  const [activeOperation, setActiveOperation] = useState<string | null>(null);
  const [operationResult, setOperationResult] = useState<any>(null);
  const [loading, setLoading] = useState(false);

  const operations = [
    {
      id: 'classify',
      title: 'Family Classification',
      description: 'Classify malware into known families',
      icon: <FamilyIcon />,
      action: async () => {
        const result = await classifyFamily({
          classification_algorithms: ['yara_rules', 'ml_clustering', 'behavioral_analysis'],
          confidence_threshold: 0.75,
          include_variant_analysis: true,
          update_signatures: true
        });
        return result.data;
      }
    },
    {
      id: 'reverse',
      title: 'Reverse Engineering',
      description: 'Perform deep reverse engineering analysis',
      icon: <ReverseIcon />,
      action: async () => {
        const result = await reverseEngineer({
          analysis_tools: ['IDA_Pro', 'Ghidra', 'x64dbg', 'OllyDbg'],
          analysis_depth: 'comprehensive',
          extract_iocs: true,
          generate_yara_rules: true
        });
        return result.data;
      }
    },
    {
      id: 'report',
      title: 'Analysis Report',
      description: 'Generate comprehensive malware analysis report',
      icon: <ReportIcon />,
      action: async () => {
        const result = await generateMalwareReport({
          report_type: 'Malware Analysis Report',
          include_static_analysis: true,
          include_dynamic_analysis: true,
          include_iocs: true,
          include_mitigation_strategies: true
        });
        return result.data;
      }
    }
  ];

  const runOperation = async (operation: any) => {
    setLoading(true);
    setActiveOperation(operation.id);
    try {
      const result = await operation.action();
      setOperationResult(result);
    } catch (error) {
      console.error(`${operation.title} failed:`, error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Card>
      <CardContent>
        <Typography variant="h6" gutterBottom>Malware Operations</Typography>

        <Grid container spacing={2}>
          {operations.map((operation) => (
            <Grid item xs={12} md={4} key={operation.id}>
              <Card variant="outlined">
                <CardContent>
                  <Box display="flex" alignItems="center" mb={1}>
                    {operation.icon}
                    <Typography variant="subtitle1" sx={{ ml: 1 }}>
                      {operation.title}
                    </Typography>
                  </Box>
                  <Typography variant="body2" color="textSecondary" mb={2}>
                    {operation.description}
                  </Typography>
                  <Button
                    variant="outlined"
                    fullWidth
                    onClick={() => runOperation(operation)}
                    disabled={loading && activeOperation === operation.id}
                  >
                    {loading && activeOperation === operation.id ? 'Running...' : 'Execute'}
                  </Button>
                </CardContent>
              </Card>
            </Grid>
          ))}
        </Grid>

        {loading && (
          <Box mt={2}>
            <LinearProgress />
            <Typography variant="body2" color="textSecondary" mt={1}>
              Executing {operations.find(op => op.id === activeOperation)?.title}...
            </Typography>
          </Box>
        )}

        {operationResult && (
          <Box mt={2}>
            <Accordion>
              <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                <Typography variant="subtitle1">Operation Results</Typography>
              </AccordionSummary>
              <AccordionDetails>
                <pre style={{ fontSize: '12px', overflow: 'auto', maxHeight: '400px' }}>
                  {JSON.stringify(operationResult, null, 2)}
                </pre>
              </AccordionDetails>
            </Accordion>
          </Box>
        )}
      </CardContent>
    </Card>
  );
};

// Main Component: Malware Management Dashboard
const MalwareManagementDashboard: React.FC = () => {
  const { data: malwareStatus, isLoading, error } = useQuery({
    queryKey: ['malware-status'],
    queryFn: fetchMalwareStatus,
    refetchInterval: 30000,
  });

  if (isLoading) {
    return (
      <Box p={3}>
        <LinearProgress />
        <Typography variant="h6" mt={2}>Loading Malware Dashboard...</Typography>
      </Box>
    );
  }

  if (error || !malwareStatus?.success) {
    return (
      <Box p={3}>
        <Alert severity="error">
          Failed to load malware system status. Please ensure the malware core is initialized.
        </Alert>
      </Box>
    );
  }

  return (
    <Box p={3}>
      <Box display="flex" alignItems="center" mb={3}>
        <MalwareIcon sx={{ mr: 2, fontSize: 32, color: '#f44336' }} />
        <Box>
          <Typography variant="h4" component="h1">
            Malware Management Dashboard
          </Typography>
          <Typography variant="subtitle1" color="textSecondary">
            Malware Analysis & Reverse Engineering Platform
          </Typography>
        </Box>
      </Box>

      <Grid container spacing={3}>
        <Grid item xs={12}>
          <MalwareOverview status={malwareStatus} />
        </Grid>

        <Grid item xs={12}>
          <MalwareAnalysisPanel />
        </Grid>

        <Grid item xs={12}>
          <MalwareOperationsPanel />
        </Grid>
      </Grid>
    </Box>
  );
};

export default MalwareManagementDashboard;
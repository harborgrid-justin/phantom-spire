'use client';

// Phantom Vulnerability Core Management - Vulnerability Assessment Dashboard
// Provides comprehensive GUI for vulnerability management and assessment

import React, { useState, useEffect } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Grid,
  Button,
  Alert,
  LinearProgress,
  Chip,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  CircularProgress,
  Tabs,
  Tab
} from '@mui/material';
import {
  BugReport as VulnerabilityIcon,
  Security as SecurityIcon,
  Assessment as AssessmentIcon,
  Speed as ScanIcon,
  Report as ReportIcon,
  CheckCircle as CheckCircleIcon,
  Warning as WarningIcon,
  ExpandMore as ExpandMoreIcon,
  Shield as ShieldIcon,
  Timeline as TimelineIcon,
  Analytics as AnalyticsIcon,
  Build as RemediationIcon
} from '@mui/icons-material';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';

// Interfaces
interface VulnerabilityStatus {
  success: boolean;
  data?: {
    status: string;
    components: Record<string, any>;
    metrics: {
      uptime: string;
      total_vulnerabilities: number;
      critical_vulnerabilities: number;
      scan_coverage: number;
    };
  };
}

interface VulnerabilityAssessment {
  assessment_id: string;
  assessment_profile: {
    target_environment: string;
    scan_type: string;
    coverage_scope: string;
    assessment_date: string;
  };
  vulnerability_summary: {
    total_found: number;
    critical: number;
    high: number;
    medium: number;
    low: number;
  };
  top_vulnerabilities: any[];
  remediation_priorities: string[];
  risk_score: number;
}

// API functions
const fetchVulnerabilityStatus = async (): Promise<VulnerabilityStatus> => {
  const response = await fetch('/api/phantom-cores/vulnerability?operation=status');
  return response.json();
};

const performVulnerabilityAssessment = async (assessmentData: any) => {
  const response = await fetch('/api/phantom-cores/vulnerability', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      operation: 'assess-vulnerabilities',
      assessmentData
    })
  });
  return response.json();
};

const scanEnvironment = async (scanData: any) => {
  const response = await fetch('/api/phantom-cores/vulnerability', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      operation: 'scan-environment',
      scanData
    })
  });
  return response.json();
};

const generateRemediation = async (remediationData: any) => {
  const response = await fetch('/api/phantom-cores/vulnerability', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      operation: 'generate-remediation',
      remediationData
    })
  });
  return response.json();
};

// Component: Vulnerability Overview
const VulnerabilityOverview: React.FC<{ status: VulnerabilityStatus | undefined }> = ({ status }) => {
  if (!status?.data) {
    return (
      <Alert severity="warning">Vulnerability system status unavailable</Alert>
    );
  }

  const { metrics } = status.data;

  const getCoverageColor = (coverage: number) => {
    if (coverage >= 90) return 'success';
    if (coverage >= 70) return 'warning';
    return 'error';
  };

  return (
    <Grid container spacing={2}>
      <Grid item xs={12} md={3}>
        <Card>
          <CardContent>
            <Typography variant="h6" gutterBottom>System Status</Typography>
            <Chip
              icon={status.data.status === 'operational' ? <CheckCircleIcon /> : <WarningIcon />}
              label={status.data.status}
              color={status.data.status === 'operational' ? 'success' : 'warning'}
            />
            <Typography variant="body2" color="textSecondary" mt={1}>
              Uptime: {metrics.uptime}
            </Typography>
          </CardContent>
        </Card>
      </Grid>

      <Grid item xs={12} md={3}>
        <Card>
          <CardContent>
            <Typography variant="h6" gutterBottom>Scan Coverage</Typography>
            <Box display="flex" alignItems="center">
              <CircularProgress
                variant="determinate"
                value={metrics.scan_coverage}
                size={60}
                color={getCoverageColor(metrics.scan_coverage)}
              />
              <Box ml={2}>
                <Typography variant="h4" color={getCoverageColor(metrics.scan_coverage)}>
                  {metrics.scan_coverage.toFixed(0)}%
                </Typography>
                <Typography variant="body2" color="textSecondary">
                  Environment Coverage
                </Typography>
              </Box>
            </Box>
          </CardContent>
        </Card>
      </Grid>

      <Grid item xs={12} md={3}>
        <Card>
          <CardContent>
            <Typography variant="h6" gutterBottom>Total Vulnerabilities</Typography>
            <Typography variant="h3" color="primary">
              {metrics.total_vulnerabilities.toLocaleString()}
            </Typography>
            <Typography variant="body2" color="textSecondary">
              Identified vulnerabilities
            </Typography>
          </CardContent>
        </Card>
      </Grid>

      <Grid item xs={12} md={3}>
        <Card>
          <CardContent>
            <Typography variant="h6" gutterBottom>Critical Vulnerabilities</Typography>
            <Typography variant="h3" color="error">
              {metrics.critical_vulnerabilities}
            </Typography>
            <Typography variant="body2" color="textSecondary">
              Requiring immediate attention
            </Typography>
          </CardContent>
        </Card>
      </Grid>
    </Grid>
  );
};

// Component: Vulnerability Assessment Panel
const VulnerabilityAssessmentPanel: React.FC = () => {
  const [assessment, setAssessment] = useState<VulnerabilityAssessment | null>(null);
  const [loading, setLoading] = useState(false);
  const [scanType, setScanType] = useState('comprehensive');
  const [targetEnvironment, setTargetEnvironment] = useState('production');

  const scanTypes = [
    'comprehensive',
    'network_scan',
    'web_application',
    'infrastructure',
    'compliance'
  ];

  const environments = [
    'production',
    'staging',
    'development',
    'cloud_infrastructure',
    'hybrid_environment'
  ];

  const runAssessment = async () => {
    setLoading(true);
    try {
      const result = await performVulnerabilityAssessment({
        target_environment: targetEnvironment,
        scan_type: scanType,
        coverage_scope: 'enterprise_wide',
        assessment_depth: 'deep_scan',
        compliance_frameworks: ['NIST', 'PCI DSS', 'ISO 27001']
      });
      setAssessment(result.data);
    } catch (error) {
      console.error('Vulnerability assessment failed:', error);
    } finally {
      setLoading(false);
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'critical': return 'error';
      case 'high': return 'warning';
      case 'medium': return 'info';
      case 'low': return 'success';
      default: return 'default';
    }
  };

  return (
    <Card>
      <CardContent>
        <Box display="flex" alignItems="center" justifyContent="space-between" mb={2}>
          <Typography variant="h6">Vulnerability Assessment</Typography>
          <Box display="flex" alignItems="center" gap={2}>
            <FormControl size="small" sx={{ minWidth: 150 }}>
              <InputLabel>Scan Type</InputLabel>
              <Select
                value={scanType}
                onChange={(e) => setScanType(e.target.value)}
                label="Scan Type"
              >
                {scanTypes.map((type) => (
                  <MenuItem key={type} value={type}>
                    {type.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
            <FormControl size="small" sx={{ minWidth: 150 }}>
              <InputLabel>Environment</InputLabel>
              <Select
                value={targetEnvironment}
                onChange={(e) => setTargetEnvironment(e.target.value)}
                label="Environment"
              >
                {environments.map((env) => (
                  <MenuItem key={env} value={env}>
                    {env.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
            <Button
              variant="contained"
              startIcon={<VulnerabilityIcon />}
              onClick={runAssessment}
              disabled={loading}
            >
              Assess
            </Button>
          </Box>
        </Box>

        {loading && <LinearProgress sx={{ mb: 2 }} />}

        {assessment && (
          <Box>
            <Grid container spacing={2} mb={2}>
              <Grid item xs={12} md={6}>
                <Paper sx={{ p: 2 }}>
                  <Typography variant="subtitle1" gutterBottom>Assessment Profile</Typography>
                  <Typography variant="body2" mb={1}>
                    <strong>Target Environment:</strong> {assessment.assessment_profile.target_environment}
                  </Typography>
                  <Typography variant="body2" mb={1}>
                    <strong>Scan Type:</strong> {assessment.assessment_profile.scan_type}
                  </Typography>
                  <Typography variant="body2" mb={1}>
                    <strong>Coverage Scope:</strong> {assessment.assessment_profile.coverage_scope}
                  </Typography>
                  <Typography variant="body2">
                    <strong>Assessment Date:</strong> {new Date(assessment.assessment_profile.assessment_date).toLocaleDateString()}
                  </Typography>
                </Paper>
              </Grid>

              <Grid item xs={12} md={6}>
                <Paper sx={{ p: 2 }}>
                  <Typography variant="subtitle1" gutterBottom>Risk Assessment</Typography>
                  <Box display="flex" alignItems="center" mb={2}>
                    <Typography variant="h4" color="error" sx={{ mr: 2 }}>
                      {assessment.risk_score.toFixed(1)}
                    </Typography>
                    <Typography variant="body2" color="textSecondary">
                      Overall Risk Score
                    </Typography>
                  </Box>
                  <Typography variant="body2">
                    <strong>Total Found:</strong> {assessment.vulnerability_summary.total_found} vulnerabilities
                  </Typography>
                </Paper>
              </Grid>
            </Grid>

            <Grid container spacing={2} mb={2}>
              <Grid item xs={12}>
                <Paper sx={{ p: 2 }}>
                  <Typography variant="subtitle1" gutterBottom>Vulnerability Breakdown</Typography>
                  <Grid container spacing={2}>
                    <Grid item xs={6} sm={3}>
                      <Box textAlign="center">
                        <Typography variant="h4" color="error">
                          {assessment.vulnerability_summary.critical}
                        </Typography>
                        <Typography variant="body2" color="textSecondary">Critical</Typography>
                      </Box>
                    </Grid>
                    <Grid item xs={6} sm={3}>
                      <Box textAlign="center">
                        <Typography variant="h4" color="warning.main">
                          {assessment.vulnerability_summary.high}
                        </Typography>
                        <Typography variant="body2" color="textSecondary">High</Typography>
                      </Box>
                    </Grid>
                    <Grid item xs={6} sm={3}>
                      <Box textAlign="center">
                        <Typography variant="h4" color="info.main">
                          {assessment.vulnerability_summary.medium}
                        </Typography>
                        <Typography variant="body2" color="textSecondary">Medium</Typography>
                      </Box>
                    </Grid>
                    <Grid item xs={6} sm={3}>
                      <Box textAlign="center">
                        <Typography variant="h4" color="success.main">
                          {assessment.vulnerability_summary.low}
                        </Typography>
                        <Typography variant="body2" color="textSecondary">Low</Typography>
                      </Box>
                    </Grid>
                  </Grid>
                </Paper>
              </Grid>
            </Grid>

            <Grid container spacing={2}>
              <Grid item xs={12} md={6}>
                <Paper sx={{ p: 2 }}>
                  <Typography variant="subtitle1" gutterBottom>Top Vulnerabilities</Typography>
                  <List dense>
                    {assessment.top_vulnerabilities?.slice(0, 4).map((vuln, index) => (
                      <ListItem key={index}>
                        <ListItemIcon>
                          <VulnerabilityIcon
                            color={getSeverityColor(vuln.severity)}
                            fontSize="small"
                          />
                        </ListItemIcon>
                        <ListItemText
                          primary={vuln.title || `Vulnerability ${index + 1}`}
                          secondary={`Severity: ${vuln.severity} | CVSS: ${vuln.cvss_score || 'N/A'}`}
                          primaryTypographyProps={{ variant: 'body2' }}
                        />
                      </ListItem>
                    ))}
                  </List>
                </Paper>
              </Grid>

              <Grid item xs={12} md={6}>
                <Paper sx={{ p: 2 }}>
                  <Typography variant="subtitle1" gutterBottom>Remediation Priorities</Typography>
                  <List dense>
                    {assessment.remediation_priorities?.slice(0, 4).map((priority, index) => (
                      <ListItem key={index}>
                        <ListItemIcon>
                          <RemediationIcon color="primary" fontSize="small" />
                        </ListItemIcon>
                        <ListItemText
                          primary={priority}
                          primaryTypographyProps={{ variant: 'body2' }}
                        />
                      </ListItem>
                    ))}
                  </List>
                </Paper>
              </Grid>
            </Grid>
          </Box>
        )}
      </CardContent>
    </Card>
  );
};

// Component: Vulnerability Operations Panel
const VulnerabilityOperationsPanel: React.FC = () => {
  const [activeOperation, setActiveOperation] = useState<string | null>(null);
  const [operationResult, setOperationResult] = useState<any>(null);
  const [loading, setLoading] = useState(false);

  const operations = [
    {
      id: 'scan',
      title: 'Environment Scan',
      description: 'Perform comprehensive vulnerability scan',
      icon: <ScanIcon />,
      action: async () => {
        const result = await scanEnvironment({
          scan_targets: ['network_infrastructure', 'web_applications', 'endpoints'],
          scan_intensity: 'aggressive',
          compliance_checks: true,
          threat_intelligence_correlation: true
        });
        return result.data;
      }
    },
    {
      id: 'remediation',
      title: 'Remediation Planning',
      description: 'Generate comprehensive remediation plan',
      icon: <RemediationIcon />,
      action: async () => {
        const result = await generateRemediation({
          vulnerability_priorities: ['critical', 'high'],
          remediation_timeline: '30_days',
          resource_constraints: 'standard',
          business_impact_consideration: true
        });
        return result.data;
      }
    },
    {
      id: 'analytics',
      title: 'Vulnerability Analytics',
      description: 'Analyze vulnerability trends and patterns',
      icon: <AnalyticsIcon />,
      action: async () => {
        const result = await fetch('/api/phantom-cores/vulnerability', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            operation: 'analyze-trends',
            analysis_period: '12_months',
            trend_categories: ['vulnerability_types', 'severity_distribution', 'remediation_effectiveness']
          })
        });
        const data = await result.json();
        return data.data;
      }
    }
  ];

  const runOperation = async (operation: any) => {
    setLoading(true);
    setActiveOperation(operation.id);
    try {
      const result = await operation.action();
      setOperationResult(result);
    } catch (error) {
      console.error(`${operation.title} failed:`, error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Card>
      <CardContent>
        <Typography variant="h6" gutterBottom>Vulnerability Operations</Typography>

        <Grid container spacing={2}>
          {operations.map((operation) => (
            <Grid item xs={12} md={4} key={operation.id}>
              <Card variant="outlined">
                <CardContent>
                  <Box display="flex" alignItems="center" mb={1}>
                    {operation.icon}
                    <Typography variant="subtitle1" sx={{ ml: 1 }}>
                      {operation.title}
                    </Typography>
                  </Box>
                  <Typography variant="body2" color="textSecondary" mb={2}>
                    {operation.description}
                  </Typography>
                  <Button
                    variant="outlined"
                    fullWidth
                    onClick={() => runOperation(operation)}
                    disabled={loading && activeOperation === operation.id}
                  >
                    {loading && activeOperation === operation.id ? 'Running...' : 'Execute'}
                  </Button>
                </CardContent>
              </Card>
            </Grid>
          ))}
        </Grid>

        {loading && (
          <Box mt={2}>
            <LinearProgress />
            <Typography variant="body2" color="textSecondary" mt={1}>
              Executing {operations.find(op => op.id === activeOperation)?.title}...
            </Typography>
          </Box>
        )}

        {operationResult && (
          <Box mt={2}>
            <Accordion>
              <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                <Typography variant="subtitle1">Operation Results</Typography>
              </AccordionSummary>
              <AccordionDetails>
                <pre style={{ fontSize: '12px', overflow: 'auto', maxHeight: '400px' }}>
                  {JSON.stringify(operationResult, null, 2)}
                </pre>
              </AccordionDetails>
            </Accordion>
          </Box>
        )}
      </CardContent>
    </Card>
  );
};

// Main Component: Vulnerability Management Dashboard
const VulnerabilityManagementDashboard: React.FC = () => {
  const { data: vulnerabilityStatus, isLoading, error } = useQuery({
    queryKey: ['vulnerability-status'],
    queryFn: fetchVulnerabilityStatus,
    refetchInterval: 30000,
  });

  if (isLoading) {
    return (
      <Box p={3}>
        <LinearProgress />
        <Typography variant="h6" mt={2}>Loading Vulnerability Management Dashboard...</Typography>
      </Box>
    );
  }

  if (error || !vulnerabilityStatus?.success) {
    return (
      <Box p={3}>
        <Alert severity="error">
          Failed to load vulnerability system status. Please ensure the vulnerability core is initialized.
        </Alert>
      </Box>
    );
  }

  return (
    <Box p={3}>
      <Box display="flex" alignItems="center" mb={3}>
        <VulnerabilityIcon sx={{ mr: 2, fontSize: 32, color: '#e91e63' }} />
        <Box>
          <Typography variant="h4" component="h1">
            Vulnerability Management Dashboard
          </Typography>
          <Typography variant="subtitle1" color="textSecondary">
            Enterprise Vulnerability Assessment & Remediation Platform
          </Typography>
        </Box>
      </Box>

      <Grid container spacing={3}>
        <Grid item xs={12}>
          <VulnerabilityOverview status={vulnerabilityStatus} />
        </Grid>

        <Grid item xs={12}>
          <VulnerabilityAssessmentPanel />
        </Grid>

        <Grid item xs={12}>
          <VulnerabilityOperationsPanel />
        </Grid>
      </Grid>
    </Box>
  );
};

export default VulnerabilityManagementDashboard;
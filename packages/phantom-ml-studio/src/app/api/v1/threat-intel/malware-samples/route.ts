/**
 * API Route: /api/malware-samples
 * Malware sample management and analysis
 */
import { NextRequest, NextResponse } from 'next/server';
import { MalwareSample } from '..\..\..\..\..\..\..\lib\database\models\MalwareSample.model';
import { initializeCompleteDatabase } from '..\..\..\..\..\..\..\lib\database\database-init';
import { Op } from 'sequelize';

/**
 * @swagger
 * /api/malware-samples:
 *   get:
 *     summary: List all malware samples
 *     description: Retrieve a paginated list of malware samples with optional filtering
 *     tags:
 *       - Malware Analysis
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           minimum: 1
 *           default: 1
 *         description: Page number
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           minimum: 1
 *           maximum: 100
 *           default: 20
 *         description: Items per page
 *       - in: query
 *         name: malware_type
 *         schema:
 *           type: string
 *           enum: [virus, trojan, ransomware, backdoor, rootkit, worm, spyware, adware, botnet, exploit_kit, other]
 *         description: Filter by malware type
 *       - in: query
 *         name: threat_level
 *         schema:
 *           type: string
 *           enum: [info, low, medium, high, critical]
 *         description: Filter by threat level
 *       - in: query
 *         name: analysis_status
 *         schema:
 *           type: string
 *           enum: [pending, analyzing, completed, failed, quarantined]
 *         description: Filter by analysis status
 *       - in: query
 *         name: is_packed
 *         schema:
 *           type: boolean
 *         description: Filter by packing status
 *       - in: query
 *         name: search
 *         schema:
 *           type: string
 *         description: Search by sample name, hash, or family
 *     responses:
 *       200:
 *         description: List of malware samples
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 data:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/MalwareSample'
 *                 pagination:
 *                   $ref: '#/components/schemas/Pagination'
 *                 count:
 *                   type: integer
 *       400:
 *         $ref: '#/components/responses/400'
 *       500:
 *         $ref: '#/components/responses/500'
 */
export async function GET(request: NextRequest) {
  try {
    // Ensure database is initialized
    await initializeCompleteDatabase();

    const { searchParams } = new URL(request.url);
    const page = parseInt(searchParams.get('page') || '1');
    const limit = Math.min(parseInt(searchParams.get('limit') || '20'), 100);
    const offset = (page - 1) * limit;

    // Filter parameters
    const malwareType = searchParams.get('malware_type');
    const threatLevel = searchParams.get('threat_level');
    const analysisStatus = searchParams.get('analysis_status');
    const isPacked = searchParams.get('is_packed');
    const search = searchParams.get('search');
    const sort = searchParams.get('sort') || 'created_at';
    const order = searchParams.get('order') || 'desc';

    // Build where clause
    const whereClause: any = {};
    
    if (malwareType) {
      whereClause.malware_type = malwareType;
    }
    
    if (threatLevel) {
      whereClause.threat_level = threatLevel;
    }
    
    if (analysisStatus) {
      whereClause.analysis_status = analysisStatus;
    }
    
    if (isPacked !== null) {
      whereClause.is_packed = isPacked === 'true';
    }

    // Handle search functionality
    if (search) {
      whereClause[Op.or] = [
        { name: { [Op.iLike]: `%${search}%` } },
        { md5_hash: { [Op.iLike]: `%${search}%` } },
        { sha1_hash: { [Op.iLike]: `%${search}%` } },
        { sha256_hash: { [Op.iLike]: `%${search}%` } },
        { family: { [Op.iLike]: `%${search}%` } }
      ];
    }

    // Get total count
    const totalCount = await MalwareSample.count({ where: whereClause });

    // Fetch malware samples with pagination
    const samples = await MalwareSample.findAll({
      where: whereClause,
      limit,
      offset,
      order: [[sort, order.toUpperCase() as 'ASC' | 'DESC']],
      attributes: { exclude: ['file_content'] } // Don't return binary file content in list
    });

    // Calculate pagination info
    const totalPages = Math.ceil(totalCount / limit);
    const pagination = {
      page,
      limit,
      total: totalCount,
      pages: totalPages,
      has_next: page < totalPages,
      has_prev: page > 1
    };

    return NextResponse.json({
      success: true,
      data: samples,
      pagination,
      count: samples.length
    });

  } catch (error) {
    console.error('API Error - malware-samples GET:', error);
    return NextResponse.json(
      {
        success: false,
        error: 'Failed to fetch malware samples',
        message: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}

/**
 * @swagger
 * /api/malware-samples:
 *   post:
 *     summary: Create a new malware sample
 *     description: Submit a new malware sample for analysis
 *     tags:
 *       - Malware Analysis
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - name
 *               - sha256_hash
 *               - malware_type
 *             properties:
 *               name:
 *                 type: string
 *                 minLength: 1
 *                 maxLength: 255
 *                 example: "trojan_banker_qakbot.exe"
 *               description:
 *                 type: string
 *                 example: "Banking trojan variant of QakBot family with credential harvesting capabilities"
 *               md5_hash:
 *                 type: string
 *                 pattern: "^[a-fA-F0-9]{32}$"
 *                 example: "d41d8cd98f00b204e9800998ecf8427e"
 *               sha1_hash:
 *                 type: string
 *                 pattern: "^[a-fA-F0-9]{40}$"
 *                 example: "da39a3ee5e6b4b0d3255bfef95601890afd80709"
 *               sha256_hash:
 *                 type: string
 *                 pattern: "^[a-fA-F0-9]{64}$"
 *                 example: "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
 *               file_size:
 *                 type: integer
 *                 minimum: 0
 *                 example: 1048576
 *               malware_type:
 *                 type: string
 *                 enum: [virus, trojan, ransomware, backdoor, rootkit, worm, spyware, adware, botnet, exploit_kit, other]
 *                 example: "trojan"
 *               family:
 *                 type: string
 *                 example: "QakBot"
 *               threat_level:
 *                 type: string
 *                 enum: [info, low, medium, high, critical]
 *                 default: medium
 *                 example: "high"
 *               analysis_status:
 *                 type: string
 *                 enum: [pending, analyzing, completed, failed, quarantined]
 *                 default: pending
 *                 example: "pending"
 *               is_packed:
 *                 type: boolean
 *                 default: false
 *                 example: true
 *               packer_info:
 *                 type: string
 *                 example: "UPX 3.96"
 *               file_type:
 *                 type: string
 *                 example: "PE32 executable"
 *               compile_time:
 *                 type: string
 *                 format: date-time
 *                 example: "2024-01-15T10:30:00Z"
 *               capabilities:
 *                 type: array
 *                 items:
 *                   type: string
 *                 example: ["keylogging", "screen_capture", "credential_theft", "persistence"]
 *               network_indicators:
 *                 type: array
 *                 items:
 *                   type: string
 *                 example: ["192.168.1.100:8080", "malicious-c2.example.com", "http://evil-domain.com/gate.php"]
 *               file_indicators:
 *                 type: array
 *                 items:
 *                   type: string
 *                 example: ["C:\\Windows\\Temp\\qbot.exe", "HKEY_LOCAL_MACHINE\\Software\\QBot", "%APPDATA%\\qbot\\config.dat"]
 *               yara_rules:
 *                 type: array
 *                 items:
 *                   type: string
 *                 example: ["QakBot_Banking_Trojan", "Generic_Trojan_Behavior", "Credential_Harvester"]
 *               sandbox_reports:
 *                 type: array
 *                 items:
 *                   type: object
 *                   properties:
 *                     sandbox:
 *                       type: string
 *                     report_url:
 *                       type: string
 *                     verdict:
 *                       type: string
 *                     score:
 *                       type: integer
 *               tags:
 *                 type: array
 *                 items:
 *                   type: string
 *                 example: ["banking-trojan", "credential-theft", "persistence", "qakbot"]
 *               metadata:
 *                 type: object
 *                 example: {"source": "honeypot", "campaign": "operation-banker", "first_seen": "2024-01-15"}
 *           examples:
 *             banking_trojan:
 *               summary: Banking Trojan Sample
 *               value:
 *                 name: "qakbot_variant_2024.exe"
 *                 description: "Advanced QakBot banking trojan with enhanced evasion techniques"
 *                 md5_hash: "a1b2c3d4e5f6789012345678901234ab"
 *                 sha1_hash: "a1b2c3d4e5f67890123456789012345678901234"
 *                 sha256_hash: "a1b2c3d4e5f67890123456789012345678901234567890123456789012345678"
 *                 file_size: 2048000
 *                 malware_type: "trojan"
 *                 family: "QakBot"
 *                 threat_level: "critical"
 *                 analysis_status: "completed"
 *                 is_packed: true
 *                 packer_info: "Custom packer with anti-debug"
 *                 file_type: "PE32+ executable (GUI) x86-64"
 *                 capabilities: ["keylogging", "web_injection", "credential_theft", "lateral_movement"]
 *                 network_indicators: ["203.0.113.50:443", "qbot-c2.malicious.com"]
 *                 tags: ["qakbot", "banking", "financial-malware", "apt"]
 *             ransomware_sample:
 *               summary: Ransomware Sample
 *               value:
 *                 name: "lockbit_ransomware.bin"
 *                 description: "LockBit ransomware variant targeting enterprise networks"
 *                 sha256_hash: "b2c3d4e5f67890123456789012345678901234567890123456789012345678ab"
 *                 file_size: 512000
 *                 malware_type: "ransomware"
 *                 family: "LockBit"
 *                 threat_level: "critical"
 *                 analysis_status: "quarantined"
 *                 is_packed: false
 *                 file_type: "PE32 executable (console) x86"
 *                 capabilities: ["file_encryption", "network_discovery", "credential_dumping"]
 *                 file_indicators: ["C:\\Windows\\lockbit.exe", "README-DECRYPT.txt"]
 *                 tags: ["lockbit", "ransomware", "encryption", "extortion"]
 *     responses:
 *       201:
 *         description: Malware sample created successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 data:
 *                   $ref: '#/components/schemas/MalwareSample'
 *                 message:
 *                   type: string
 *                   example: "Malware sample created successfully"
 *       400:
 *         $ref: '#/components/responses/400'
 *       409:
 *         description: Sample with same hash already exists
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ErrorResponse'
 *       500:
 *         $ref: '#/components/responses/500'
 */
export async function POST(request: NextRequest) {
  try {
    // Ensure database is initialized
    await initializeCompleteDatabase();

    const body = await request.json();

    // Validate required fields
    if (!body.name || !body.sha256_hash || !body.malware_type) {
      return NextResponse.json(
        {
          success: false,
          error: 'Validation error',
          message: 'Name, SHA256 hash, and malware type are required'
        },
        { status: 400 }
      );
    }

    // Validate malware type
    const validTypes = ['virus', 'trojan', 'ransomware', 'backdoor', 'rootkit', 'worm', 'spyware', 'adware', 'botnet', 'exploit_kit', 'other'];
    if (!validTypes.includes(body.malware_type)) {
      return NextResponse.json(
        {
          success: false,
          error: 'Validation error',
          message: `Invalid malware type. Must be one of: ${validTypes.join(', ')}`
        },
        { status: 400 }
      );
    }

    // Validate hash formats
    if (body.md5_hash && !/^[a-fA-F0-9]{32}$/.test(body.md5_hash)) {
      return NextResponse.json(
        {
          success: false,
          error: 'Validation error',
          message: 'Invalid MD5 hash format'
        },
        { status: 400 }
      );
    }

    if (body.sha1_hash && !/^[a-fA-F0-9]{40}$/.test(body.sha1_hash)) {
      return NextResponse.json(
        {
          success: false,
          error: 'Validation error',
          message: 'Invalid SHA1 hash format'
        },
        { status: 400 }
      );
    }

    if (!/^[a-fA-F0-9]{64}$/.test(body.sha256_hash)) {
      return NextResponse.json(
        {
          success: false,
          error: 'Validation error',
          message: 'Invalid SHA256 hash format'
        },
        { status: 400 }
      );
    }

    // Set defaults for optional fields
    const sampleData: any = {
      name: body.name,
      description: body.description,
      md5_hash: body.md5_hash,
      sha1_hash: body.sha1_hash,
      sha256_hash: body.sha256_hash,
      file_size: body.file_size,
      malware_type: body.malware_type,
      family: body.family,
      threat_level: body.threat_level || 'medium',
      analysis_status: body.analysis_status || 'pending',
      is_packed: body.is_packed !== undefined ? body.is_packed : false,
      packer_info: body.packer_info,
      file_type: body.file_type,
      capabilities: body.capabilities || [],
      network_indicators: body.network_indicators || [],
      file_indicators: body.file_indicators || [],
      yara_rules: body.yara_rules || [],
      sandbox_reports: body.sandbox_reports || [],
      tags: body.tags || [],
      metadata: body.metadata || {}
    };

    // Add optional date fields
    if (body.compile_time) {
      sampleData.compile_time = new Date(body.compile_time);
    }
    if (body.first_seen) {
      sampleData.first_seen = new Date(body.first_seen);
    }

    // Create the malware sample
    const sample = await MalwareSample.create(sampleData);

    return NextResponse.json({
      success: true,
      data: sample,
      message: 'Malware sample created successfully'
    }, { status: 201 });

  } catch (error) {
    console.error('API Error - malware-samples POST:', error);

    // Handle duplicate hash error
    if (error instanceof Error && (
      error.message.includes('already exists') ||
      error.message.includes('unique constraint')
    )) {
      return NextResponse.json(
        {
          success: false,
          error: 'Conflict',
          message: 'Sample with same hash already exists'
        },
        { status: 409 }
      );
    }

    // Handle validation errors
    if (error instanceof Error && (
      error.message.includes('required') || 
      error.message.includes('must be') ||
      error.message.includes('invalid')
    )) {
      return NextResponse.json(
        {
          success: false,
          error: 'Validation error',
          message: error.message
        },
        { status: 400 }
      );
    }

    return NextResponse.json(
      {
        success: false,
        error: 'Failed to create malware sample',
        message: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}

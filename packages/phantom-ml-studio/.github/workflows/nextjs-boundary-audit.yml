name: Next.js Component Boundary Audit

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  boundary-audit:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run boundary checks
      run: npm run lint:boundary

    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production

    - name: Run bundle analysis
      run: npm run build:analyze
      env:
        ANALYZE: true

    - name: Upload bundle analysis results
      uses: actions/upload-artifact@v4
      if: matrix.node-version == '20.x'
      with:
        name: bundle-analysis
        path: .next/analyze/

    - name: Check for server-only violations
      run: |
        echo "Checking for server-only package violations..."
        if grep -r "server-only" src/app/api/ --include="*.ts" --include="*.tsx" | wc -l | grep -q "^0$"; then
          echo "❌ API routes missing server-only protection"
          exit 1
        else
          echo "✅ API routes properly protected with server-only"
        fi

    - name: Validate component boundaries
      run: |
        echo "Validating component boundaries..."
        # Check that all Client Components have 'use client'
        CLIENT_COMPONENTS=$(find src -name "*Client*.tsx" -o -name "*client*.tsx")
        for file in $CLIENT_COMPONENTS; do
          if ! head -5 "$file" | grep -q "use client"; then
            echo "❌ Client Component missing 'use client': $file"
            exit 1
          fi
        done
        echo "✅ Client Components properly marked"

        # Check that Server Components don't have client-only APIs
        SERVER_COMPONENTS=$(find src/app -name "*.tsx" | grep -v Client | grep -v client)
        for file in $SERVER_COMPONENTS; do
          if grep -q -E "(window\.|document\.|localStorage|sessionStorage)" "$file" 2>/dev/null; then
            echo "❌ Server Component contains client-only APIs: $file"
            exit 1
          fi
        done
        echo "✅ Server Components properly separated"

  security-audit:
    runs-on: ubuntu-latest
    needs: boundary-audit

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level moderate

    - name: Check for exposed secrets in client bundle
      run: |
        echo "Checking for secrets in client bundle..."
        npm run build

        # Check for non-NEXT_PUBLIC_ environment variables in client bundle
        if find .next/static -name "*.js" -exec grep -l "process\.env\.[^N]" {} \; | head -1; then
          echo "❌ Non-public environment variables found in client bundle"
          exit 1
        else
          echo "✅ No secrets found in client bundle"
        fi

  compliance-report:
    runs-on: ubuntu-latest
    needs: [boundary-audit, security-audit]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate compliance report
      run: |
        echo "# Next.js Component Boundary Compliance Report" > compliance-report.md
        echo "Generated on: $(date)" >> compliance-report.md
        echo "" >> compliance-report.md
        echo "## Audit Results" >> compliance-report.md
        echo "- Boundary Check: ${{ needs.boundary-audit.result }}" >> compliance-report.md
        echo "- Security Audit: ${{ needs.security-audit.result }}" >> compliance-report.md
        echo "" >> compliance-report.md
        echo "## Component Analysis" >> compliance-report.md
        echo "- Total React Files: $(find src -name '*.tsx' -o -name '*.ts' | wc -l)" >> compliance-report.md
        echo "- Client Components: $(find src -name '*.tsx' -exec grep -l 'use client' {} \; | wc -l)" >> compliance-report.md
        echo "- Server Components: $(find src/app -name '*.tsx' | grep -v Client | wc -l)" >> compliance-report.md
        echo "- API Routes: $(find src/app/api -name '*.ts' | wc -l)" >> compliance-report.md

    - name: Upload compliance report
      uses: actions/upload-artifact@v4
      with:
        name: compliance-report
        path: compliance-report.md
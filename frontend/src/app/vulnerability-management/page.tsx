'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { useServicePage } from '../../lib/business-logic';

interface QuickStat {
  label: string;
  value: number;
  change: number;
  color: string;
}

export default function VulnerabilityManagementPage() {
  const { 
    data, 
    loading, 
    error, 
    connected, 
    execute, 
    businessStats,
    notifications,
    removeNotification 
  } = useServicePage('vulnerability-management-main', '/api/v1/vulnerability-management/analytics/security-metrics');

  const [quickStats, setQuickStats] = useState<QuickStat[]>([]);

  useEffect(() => {
    loadDashboardData();
  }, []);

  const loadDashboardData = async () => {
    try {
      await execute('load-dashboard', {});
      if (data) {
        setQuickStats([
          {
            label: 'Total Vulnerabilities',
            value: data.vulnerabilityMetrics?.totalVulnerabilities || 0,
            change: -12.5,
            color: 'blue'
          },
          {
            label: 'Critical Open',
            value: data.vulnerabilityMetrics?.criticalOpen || 0,
            change: -25.3,
            color: 'red'
          },
          {
            label: 'MTTR (Days)',
            value: parseFloat(data.remediationMetrics?.averagePatchTime?.replace(' days', '') || '0'),
            change: -8.7,
            color: 'green'
          },
          {
            label: 'Compliance Rate',
            value: data.complianceMetrics?.overallCompliance || 0,
            change: 3.2,
            color: 'purple'
          }
        ]);
      }
    } catch (err) {
      console.error('Failed to load dashboard data:', err);
    }
  };

  const moduleCategories = [
    {
      title: 'Asset Management',
      description: 'Comprehensive asset tracking and vulnerability assessment',
      icon: '🏢',
      color: 'bg-blue-50 border-blue-200',
      pages: [
        { name: 'Asset Inventory', path: '/vulnerability-management/assets/inventory', icon: '📋' },
        { name: 'Vulnerability Assessment', path: '/vulnerability-management/assets/assessment/AST-001', icon: '🔍' },
        { name: 'Asset Groups', path: '/vulnerability-management/assets/groups', icon: '📋' },
        { name: 'Risk Profiles', path: '/vulnerability-management/assets/risk-profiles', icon: '⚠️' },
        { name: 'Compliance Status', path: '/vulnerability-management/assets/compliance-status', icon: '✅' },
        { name: 'Patch Status', path: '/vulnerability-management/assets/patch-status', icon: '🔧' },
        { name: 'Security Baselines', path: '/vulnerability-management/assets/security-baselines', icon: '🛡️' },
        { name: 'Lifecycle Management', path: '/vulnerability-management/assets/lifecycle', icon: '🔄' }
      ]
    },
    {
      title: 'Threat Intelligence',
      description: 'Advanced threat intelligence and contextual analysis',
      icon: '🕵️',
      color: 'bg-red-50 border-red-200',
      pages: [
        { name: 'Threat Feeds', path: '/vulnerability-management/threat-intelligence/feeds', icon: '📡' },
        { name: 'IOC Management', path: '/vulnerability-management/threat-intelligence/iocs', icon: '🎯' },
        { name: 'Threat Actors', path: '/vulnerability-management/threat-intelligence/actors', icon: '👥' },
        { name: 'Campaign Tracking', path: '/vulnerability-management/threat-intelligence/campaigns', icon: '🎭' },
        { name: 'Threat Hunting', path: '/vulnerability-management/threat-intelligence/hunting', icon: '🕵️' },
        { name: 'Early Warning', path: '/vulnerability-management/threat-intelligence/early-warning', icon: '🚨' }
      ]
    },
    {
      title: 'Compliance & Frameworks',
      description: 'Regulatory compliance and security framework management',
      icon: '📋',
      color: 'bg-green-50 border-green-200',
      pages: [
        { name: 'Compliance Dashboard', path: '/vulnerability-management/compliance/dashboard', icon: '📊' },
        { name: 'Framework Mapping', path: '/vulnerability-management/compliance/framework-mapping', icon: '🗺️' },
        { name: 'Control Assessments', path: '/vulnerability-management/compliance/control-assessments', icon: '✔️' },
        { name: 'Audit Trails', path: '/vulnerability-management/compliance/audit-trails', icon: '📝' },
        { name: 'Regulatory Reports', path: '/vulnerability-management/compliance/regulatory-reports', icon: '📋' },
        { name: 'Policy Management', path: '/vulnerability-management/compliance/policy-management', icon: '📜' }
      ]
    },
    {
      title: 'Remediation & Patch Management',
      description: 'End-to-end patch and remediation lifecycle management',
      icon: '🔧',
      color: 'bg-yellow-50 border-yellow-200',
      pages: [
        { name: 'Patch Planning', path: '/vulnerability-management/remediation/patch-planning', icon: '📅' },
        { name: 'Patch Testing', path: '/vulnerability-management/remediation/patch-testing', icon: '🧪' },
        { name: 'Patch Deployment', path: '/vulnerability-management/remediation/patch-deployment', icon: '🚀' },
        { name: 'Rollback Management', path: '/vulnerability-management/remediation/rollback-management', icon: '↩️' },
        { name: 'Emergency Response', path: '/vulnerability-management/remediation/emergency-response', icon: '🚑' },
        { name: 'Maintenance Windows', path: '/vulnerability-management/remediation/maintenance-windows', icon: '🕒' }
      ]
    },
    {
      title: 'Analytics & Metrics',
      description: 'Advanced analytics, metrics, and predictive intelligence',
      icon: '📊',
      color: 'bg-purple-50 border-purple-200',
      pages: [
        { name: 'Security Metrics', path: '/vulnerability-management/analytics/security-metrics', icon: '📈' },
        { name: 'Trend Analysis', path: '/vulnerability-management/analytics/trend-analysis', icon: '📉' },
        { name: 'Performance KPIs', path: '/vulnerability-management/analytics/performance-kpis', icon: '⚡' },
        { name: 'Executive Dashboard', path: '/vulnerability-management/analytics/executive-dashboard', icon: '👔' },
        { name: 'Risk Heatmaps', path: '/vulnerability-management/analytics/risk-heatmaps', icon: '🌡️' },
        { name: 'Predictive Analytics', path: '/vulnerability-management/analytics/predictive-analytics', icon: '🔮' }
      ]
    }
  ];

  if (loading) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="flex items-center justify-center h-64">
          <div className="text-lg">Loading vulnerability management dashboard...</div>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      {/* Business Logic Status */}
      <div className="mb-4">
        <div className="flex items-center space-x-4 text-sm">
          <div className={`flex items-center ${connected ? 'text-green-600' : 'text-gray-500'}`}>
            <div className={`w-2 h-2 rounded-full mr-2 ${connected ? 'bg-green-500' : 'bg-gray-400'}`}></div>
            {connected ? 'Vulnerability Management Platform Online' : 'Vulnerability Management Platform Offline'}
          </div>
          {businessStats && (
            <div className="text-gray-600">
              System Health: {businessStats.totalRequests || 0} requests processed
            </div>
          )}
        </div>
      </div>

      {/* Header */}
      <div className="flex items-center justify-between mb-8">
        <div>
          <h1 className="text-4xl font-bold text-gray-900">🛡️ Vulnerability Management Platform</h1>
          <p className="text-gray-600 mt-2">Comprehensive enterprise vulnerability management and threat intelligence platform</p>
        </div>
        <div className="flex space-x-2">
          <button 
            onClick={loadDashboardData}
            className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
          >
            Refresh Dashboard
          </button>
          <Link href="/cve/dashboard" className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors">
            CVE Dashboard
          </Link>
        </div>
      </div>

      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6">
          {error}
        </div>
      )}

      {/* Quick Stats */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        {quickStats.map((stat, index) => (
          <div key={index} className={`bg-white p-6 rounded-lg shadow-md border-l-4 border-${stat.color}-500`}>
            <div className="flex items-center justify-between">
              <div>
                <div className="text-2xl font-bold text-gray-900">{stat.value}</div>
                <div className="text-gray-600">{stat.label}</div>
              </div>
              <div className={`text-sm ${stat.change >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                {stat.change >= 0 ? '↗' : '↘'} {Math.abs(stat.change)}%
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Platform Overview */}
      <div className="bg-white rounded-lg shadow-md p-6 mb-8">
        <h2 className="text-2xl font-semibold text-gray-900 mb-4">Platform Overview</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="text-center">
            <div className="text-3xl font-bold text-blue-600">{moduleCategories.length}</div>
            <div className="text-gray-600">Management Modules</div>
          </div>
          <div className="text-center">
            <div className="text-3xl font-bold text-green-600">
              {moduleCategories.reduce((sum, category) => sum + category.pages.length, 0)}
            </div>
            <div className="text-gray-600">Total Features</div>
          </div>
          <div className="text-center">
            <div className="text-3xl font-bold text-purple-600">24/7</div>
            <div className="text-gray-600">Monitoring & Response</div>
          </div>
        </div>
      </div>

      {/* Module Categories */}
      <div className="space-y-8">
        {moduleCategories.map((category, categoryIndex) => (
          <div key={categoryIndex} className={`${category.color} border rounded-lg p-6`}>
            <div className="flex items-center mb-4">
              <span className="text-2xl mr-3">{category.icon}</span>
              <div>
                <h3 className="text-xl font-semibold text-gray-900">{category.title}</h3>
                <p className="text-gray-600">{category.description}</p>
              </div>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
              {category.pages.map((page, pageIndex) => (
                <Link
                  key={pageIndex}
                  href={page.path}
                  className="bg-white p-4 rounded-lg shadow-sm hover:shadow-md transition-shadow border border-gray-200 hover:border-gray-300"
                >
                  <div className="flex items-center space-x-3">
                    <span className="text-xl">{page.icon}</span>
                    <div>
                      <div className="font-medium text-gray-900">{page.name}</div>
                    </div>
                  </div>
                </Link>
              ))}
            </div>
          </div>
        ))}
      </div>

      {/* Integration Status */}
      <div className="mt-8 bg-gray-50 rounded-lg p-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Integration Status</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="flex items-center justify-between bg-white p-3 rounded">
            <span className="text-gray-700">Backend API</span>
            <span className="text-green-600 font-medium">✅ Connected</span>
          </div>
          <div className="flex items-center justify-between bg-white p-3 rounded">
            <span className="text-gray-700">Business Logic</span>
            <span className={connected ? 'text-green-600 font-medium' : 'text-red-600 font-medium'}>
              {connected ? '✅ Active' : '❌ Disconnected'}
            </span>
          </div>
          <div className="flex items-center justify-between bg-white p-3 rounded">
            <span className="text-gray-700">Real-time Updates</span>
            <span className="text-green-600 font-medium">✅ Enabled</span>
          </div>
        </div>
      </div>

      {/* Notifications */}
      <div className="fixed top-4 right-4 space-y-2 z-50">
        {notifications.map((notification) => (
          <div key={notification.id} className="max-w-sm w-full bg-white shadow-lg rounded-lg">
            <div className={`p-4 rounded-lg shadow-lg ${
              notification.type === 'success' ? 'bg-green-500 text-white' :
              notification.type === 'error' ? 'bg-red-500 text-white' :
              notification.type === 'warning' ? 'bg-yellow-500 text-white' :
              'bg-blue-500 text-white'
            }`}>
              <div className="flex justify-between items-center">
                <span>{notification.message}</span>
                <button
                  onClick={() => removeNotification(notification.id)}
                  className="ml-4 text-white hover:text-gray-200"
                >
                  ×
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}
'use client';

import { useState, useEffect } from 'react';
import { useServicePage } from '../../../../lib/business-logic';

export default function IocsPage() {
  const { 
    data, 
    loading, 
    error, 
    connected, 
    execute, 
    stats,
    notifications,
    removeNotification 
  } = useServicePage('threat-intelligence-iocs');

  const [refreshing, setRefreshing] = useState(false);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setRefreshing(true);
      await execute('get-data', { endpoint: '/api/v1/vulnerability-management/threat-intelligence/iocs' });
    } catch (err) {
      console.error('Failed to load data:', err);
    } finally {
      setRefreshing(false);
    }
  };

  if (loading) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="flex items-center justify-center h-64">
          <div className="text-lg">Loading IOC Management...</div>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      {/* Business Logic Status */}
      <div className="mb-4">
        <div className="flex items-center space-x-4 text-sm">
          <div className={`flex items-center ${connected ? 'text-green-600' : 'text-gray-500'}`}>
            <div className={`w-2 h-2 rounded-full mr-2 ${connected ? 'bg-green-500' : 'bg-gray-400'}`}></div>
            {connected ? 'IOC Management System Online' : 'IOC Management System Offline'}
          </div>
          {businessStats && (
            <div className="text-gray-600">
              Total Requests: {stats?.totalRequests || 0}
            </div>
          )}
        </div>
      </div>

      {/* Header */}
      <div className="flex items-center justify-between mb-8">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">ðŸŽ¯ IOC Management</h1>
          <p className="text-gray-600 mt-2">Indicators of compromise management</p>
        </div>
        <div className="flex space-x-2">
          <button 
            onClick={loadData}
            disabled={refreshing}
            className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50"
          >
            {refreshing ? 'Loading...' : 'Refresh Data'}
          </button>
          <button className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors">
            Export Data
          </button>
        </div>
      </div>

      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6">
          {error}
        </div>
      )}

      {/* Main Content */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Summary Cards */}
        <div className="lg:col-span-3">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
            <div className="bg-white p-4 rounded-lg shadow-md border-l-4 border-blue-500">
              <div className="text-2xl font-bold text-gray-900">{data?.summary?.total || 0}</div>
              <div className="text-gray-600">Total Items</div>
            </div>
            <div className="bg-white p-4 rounded-lg shadow-md border-l-4 border-green-500">
              <div className="text-2xl font-bold text-gray-900">{data?.summary?.active || 0}</div>
              <div className="text-gray-600">Active</div>
            </div>
            <div className="bg-white p-4 rounded-lg shadow-md border-l-4 border-yellow-500">
              <div className="text-2xl font-bold text-gray-900">{data?.summary?.pending || 0}</div>
              <div className="text-gray-600">Pending</div>
            </div>
            <div className="bg-white p-4 rounded-lg shadow-md border-l-4 border-red-500">
              <div className="text-2xl font-bold text-gray-900">{data?.summary?.critical || 0}</div>
              <div className="text-gray-600">Critical</div>
            </div>
          </div>
        </div>

        {/* Main Content Area */}
        <div className="lg:col-span-2">
          <div className="bg-white rounded-lg shadow-md p-6">
            <h2 className="text-xl font-semibold text-gray-900 mb-4">Overview</h2>
            <div className="space-y-4">
              {data?.items?.length > 0 ? (
                data.items.map((item, index) => (
                  <div key={index} className="border border-gray-200 rounded-lg p-4">
                    <div className="flex items-center justify-between">
                      <div>
                        <h3 className="font-medium text-gray-900">{item.name || item.title || `Item ${index + 1}`}</h3>
                        <p className="text-sm text-gray-600">{item.description || item.summary || 'No description available'}</p>
                      </div>
                      <div className="flex items-center space-x-2">
                        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                          item.status === 'active' ? 'bg-green-100 text-green-800' :
                          item.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                          item.status === 'critical' ? 'bg-red-100 text-red-800' :
                          'bg-gray-100 text-gray-800'
                        }`}>
                          {item.status || 'Unknown'}
                        </span>
                      </div>
                    </div>
                  </div>
                ))
              ) : (
                <div className="text-center py-8">
                  <div className="text-gray-500">No data available</div>
                  <button 
                    onClick={loadData}
                    className="mt-2 text-blue-600 hover:text-blue-800"
                  >
                    Refresh to load data
                  </button>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Sidebar */}
        <div className="lg:col-span-1">
          <div className="bg-white rounded-lg shadow-md p-6 mb-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Quick Stats</h3>
            <div className="space-y-3">
              <div className="flex justify-between">
                <span className="text-gray-600">Last Updated:</span>
                <span className="text-gray-900">{data?.lastUpdated ? new Date(data.lastUpdated).toLocaleDateString() : 'N/A'}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">Status:</span>
                <span className="text-green-600">Operational</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">Health:</span>
                <span className="text-green-600">Good</span>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-md p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Recent Activity</h3>
            <div className="space-y-3">
              {data?.recentActivity?.length > 0 ? (
                data.recentActivity.slice(0, 5).map((activity, index) => (
                  <div key={index} className="text-sm">
                    <div className="text-gray-900">{activity.action || activity.event}</div>
                    <div className="text-gray-500">{activity.timestamp ? new Date(activity.timestamp).toLocaleString() : 'Recent'}</div>
                  </div>
                ))
              ) : (
                <div className="text-gray-500 text-sm">No recent activity</div>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Notifications */}
      <div className="fixed top-4 right-4 space-y-2 z-50">
        {notifications.map((notification) => (
          <div key={notification.id} className="max-w-sm w-full bg-white shadow-lg rounded-lg">
            <div className={`p-4 rounded-lg shadow-lg ${
              notification.type === 'success' ? 'bg-green-500 text-white' :
              notification.type === 'error' ? 'bg-red-500 text-white' :
              notification.type === 'warning' ? 'bg-yellow-500 text-white' :
              'bg-blue-500 text-white'
            }`}>
              <div className="flex justify-between items-center">
                <span>{notification.message}</span>
                <button
                  onClick={() => removeNotification(notification.id)}
                  className="ml-4 text-white hover:text-gray-200"
                >
                  Ã—
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}
'use client';

import { useEffect, useState } from 'react';
import { apiClient } from '../../../lib/api';
import { useServicePage } from '../../../lib/business-logic';
import { Evidence } from '../../../types/api';

interface MalwareSampleEvidence extends Evidence {
  filename: string;
  fileHash: {
    md5: string;
    sha1: string;
    sha256: string;
  };
  fileSize: number;
  mimeType: string;
  detectionRate: number;
  familyName?: string;
  threatLevel: 'low' | 'medium' | 'high' | 'critical';
  analysisResults: {
    static: boolean;
    dynamic: boolean;
    sandbox: boolean;
  };
  yara: string[];
  antivirusDetection: {
    vendor: string;
    detection: string;
    confidence: number;
  }[];
  firstSeen: string;
  lastSeen: string;
}

export default function MalwareSamplesPage() {
  // Business Logic Integration
  const {
    loading: businessLoading,
    error: businessError,
    stats,
    connected,
    notifications,
    execute,
    refresh,
    addNotification,
    removeNotification
  } = useServicePage('evidence-malware');

  const [samples, setSamples] = useState<MalwareSampleEvidence[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [selectedThreatLevel, setSelectedThreatLevel] = useState<string>('all');
  const [selectedFamily, setSelectedFamily] = useState<string>('all');
  const [searchTerm, setSearchTerm] = useState('');

  useEffect(() => {
    fetchMalwareSamples();
  }, [selectedThreatLevel, selectedFamily]);

  const fetchMalwareSamples = async () => {
    try {
      setLoading(true);
      
      // Use business logic first
      const businessResponse = await execute('getMalwareSamples', { 
        threatLevel: selectedThreatLevel,
        family: selectedFamily 
      });
      
      if (businessResponse.success && businessResponse.data) {
        setSamples(businessResponse.data);
        addNotification('success', 'Malware samples loaded successfully via business logic');
      } else {
        // Fallback to mock data for demo
        const mockSamples: MalwareSampleEvidence[] = [
          {
            id: 'mal_001',
            type: 'malware_sample',
            description: 'Suspected banking trojan executable',
            filename: 'suspicious_binary.exe',
            fileHash: {
              md5: 'a1b2c3d4e5f6789012345678901234567',
              sha1: 'a1b2c3d4e5f6789012345678901234567890abcde',
              sha256: 'a1b2c3d4e5f678901234567890123456789012345678901234567890abcdef01'
            },
            fileSize: 1048576,
            mimeType: 'application/x-executable',
            detectionRate: 85.5,
            familyName: 'Zeus',
            threatLevel: 'high',
            analysisResults: {
              static: true,
              dynamic: true,
              sandbox: true
            },
            yara: ['zeus_banker', 'packed_binary', 'suspicious_imports'],
            antivirusDetection: [
              { vendor: 'ClamAV', detection: 'Trojan.Win32.Zeus', confidence: 90 },
              { vendor: 'Windows Defender', detection: 'Trojan:Win32/Zeus.A', confidence: 85 },
              { vendor: 'McAfee', detection: 'GenKryptik.FRKL', confidence: 75 }
            ],
            firstSeen: new Date(Date.now() - 86400000 * 5).toISOString(),
            lastSeen: new Date(Date.now() - 3600000).toISOString(),
            createdAt: new Date(Date.now() - 86400000 * 5).toISOString(),
            updatedAt: new Date(Date.now() - 3600000).toISOString()
          },
          {
            id: 'mal_002',
            type: 'malware_sample',
            description: 'Ransomware payload detected in email attachment',
            filename: 'invoice_2024.pdf.exe',
            fileHash: {
              md5: 'b2c3d4e5f6789012345678901234567a',
              sha1: 'b2c3d4e5f6789012345678901234567890abcdef',
              sha256: 'b2c3d4e5f678901234567890123456789012345678901234567890abcdef02'
            },
            fileSize: 2097152,
            mimeType: 'application/x-executable',
            detectionRate: 92.3,
            familyName: 'WannaCry',
            threatLevel: 'critical',
            analysisResults: {
              static: true,
              dynamic: true,
              sandbox: true
            },
            yara: ['wannacry_ransomware', 'file_encryption', 'network_spread'],
            antivirusDetection: [
              { vendor: 'ClamAV', detection: 'Ransom.WannaCry', confidence: 95 },
              { vendor: 'Windows Defender', detection: 'Ransom:Win32/WannaCrypt', confidence: 98 },
              { vendor: 'Kaspersky', detection: 'Trojan-Ransom.Win32.Wannacry', confidence: 97 }
            ],
            firstSeen: new Date(Date.now() - 86400000 * 2).toISOString(),
            lastSeen: new Date(Date.now() - 1800000).toISOString(),
            createdAt: new Date(Date.now() - 86400000 * 2).toISOString(),
            updatedAt: new Date(Date.now() - 1800000).toISOString()
          }
        ];
        
        setSamples(mockSamples);
        addNotification('info', 'Malware samples loaded from demo data (business logic unavailable)');
      }
    } catch (err) {
      const errorMsg = err instanceof Error ? err.message : 'Failed to fetch malware samples';
      setError(errorMsg);
      addNotification('error', errorMsg);
    } finally {
      setLoading(false);
    }
  };

  const filteredSamples = samples.filter(sample => {
    const matchesSearch = searchTerm === '' || 
      sample.filename.toLowerCase().includes(searchTerm.toLowerCase()) ||
      sample.familyName?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      sample.description.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesThreatLevel = selectedThreatLevel === 'all' || sample.threatLevel === selectedThreatLevel;
    const matchesFamily = selectedFamily === 'all' || sample.familyName === selectedFamily;
    
    return matchesSearch && matchesThreatLevel && matchesFamily;
  });

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 B';
    const k = 1024;
    const sizes = ['B', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const getThreatLevelColor = (level: string) => {
    switch (level) {
      case 'critical': return 'bg-red-100 text-red-800';
      case 'high': return 'bg-orange-100 text-orange-800';
      case 'medium': return 'bg-yellow-100 text-yellow-800';
      case 'low': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const uniqueFamilies = [...new Set(samples.map(s => s.familyName).filter(Boolean))];

  if (loading) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="flex items-center justify-center h-64">
          <div className="text-lg">Loading malware samples...</div>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      {/* Business Logic Status */}
      <div className="mb-4">
        <div className="flex items-center space-x-4 text-sm">
          <div className={`flex items-center ${connected ? 'text-green-600' : 'text-gray-500'}`}>
            <div className={`w-2 h-2 rounded-full mr-2 ${connected ? 'bg-green-500' : 'bg-gray-400'}`}></div>
            {connected ? 'Business Logic Connected' : 'Business Logic Offline'}
          </div>
          {stats && (
            <div className="text-gray-600">
              Service Stats: {stats.totalRequests || 0} requests
            </div>
          )}
          <button
            onClick={refresh}
            className="text-blue-600 hover:text-blue-800"
          >
            Refresh
          </button>
        </div>
      </div>

      {/* Header */}
      <div className="flex items-center justify-between mb-8">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Malware Sample Evidence</h1>
          <p className="text-gray-600 mt-2">Analyze and manage malicious software samples</p>
        </div>
        <div className="flex space-x-2">
          <button className="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors">
            Upload Sample
          </button>
          <button className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">
            Batch Analysis
          </button>
        </div>
      </div>

      {/* Controls */}
      <div className="bg-white rounded-lg shadow-md p-6 mb-8">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Threat Level
            </label>
            <select 
              value={selectedThreatLevel}
              onChange={(e) => setSelectedThreatLevel(e.target.value)}
              className="w-full border border-gray-300 rounded-md px-3 py-2"
            >
              <option value="all">All Levels</option>
              <option value="critical">Critical</option>
              <option value="high">High</option>
              <option value="medium">Medium</option>
              <option value="low">Low</option>
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Malware Family
            </label>
            <select 
              value={selectedFamily}
              onChange={(e) => setSelectedFamily(e.target.value)}
              className="w-full border border-gray-300 rounded-md px-3 py-2"
            >
              <option value="all">All Families</option>
              {uniqueFamilies.map(family => (
                <option key={family} value={family}>{family}</option>
              ))}
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Search
            </label>
            <input
              type="text"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              placeholder="Search by filename or hash..."
              className="w-full border border-gray-300 rounded-md px-3 py-2"
            />
          </div>
          <div className="flex items-end">
            <button
              onClick={fetchMalwareSamples}
              className="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 transition-colors w-full"
            >
              Search
            </button>
          </div>
        </div>
      </div>

      {/* Malware Stats */}
      <div className="grid grid-cols-1 md:grid-cols-5 gap-4 mb-8">
        <div className="bg-white p-4 rounded-lg shadow-md">
          <div className="text-2xl font-bold text-red-600">
            {filteredSamples.length}
          </div>
          <div className="text-sm text-gray-600">Total Samples</div>
        </div>
        <div className="bg-white p-4 rounded-lg shadow-md">
          <div className="text-2xl font-bold text-orange-600">
            {filteredSamples.filter(s => s.threatLevel === 'critical').length}
          </div>
          <div className="text-sm text-gray-600">Critical</div>
        </div>
        <div className="bg-white p-4 rounded-lg shadow-md">
          <div className="text-2xl font-bold text-yellow-600">
            {filteredSamples.filter(s => s.threatLevel === 'high').length}
          </div>
          <div className="text-sm text-gray-600">High Risk</div>
        </div>
        <div className="bg-white p-4 rounded-lg shadow-md">
          <div className="text-2xl font-bold text-blue-600">
            {uniqueFamilies.length}
          </div>
          <div className="text-sm text-gray-600">Families</div>
        </div>
        <div className="bg-white p-4 rounded-lg shadow-md">
          <div className="text-2xl font-bold text-purple-600">
            {(filteredSamples.reduce((sum, s) => sum + s.detectionRate, 0) / Math.max(filteredSamples.length, 1)).toFixed(1)}%
          </div>
          <div className="text-sm text-gray-600">Avg Detection</div>
        </div>
      </div>

      {/* Malware Samples List */}
      <div className="bg-white rounded-lg shadow-md overflow-hidden">
        {filteredSamples.length === 0 ? (
          <div className="p-8 text-center text-gray-500">
            <div className="text-4xl mb-4">🦠</div>
            <h3 className="text-lg font-medium mb-2">No Malware Samples Found</h3>
            <p>Upload malware samples for analysis or adjust your search criteria.</p>
          </div>
        ) : (
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 p-6">
            {filteredSamples.map((sample) => (
              <div key={sample.id} className="bg-gray-50 rounded-lg p-6 border border-gray-200 hover:shadow-lg transition-shadow">
                {/* Header */}
                <div className="flex justify-between items-start mb-4">
                  <div className="flex-1">
                    <h3 className="text-lg font-semibold text-gray-900 mb-1">
                      {sample.filename}
                    </h3>
                    <p className="text-sm text-gray-600 mb-2">{sample.description}</p>
                  </div>
                  <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getThreatLevelColor(sample.threatLevel)}`}>
                    {sample.threatLevel.toUpperCase()}
                  </span>
                </div>

                {/* Basic Info */}
                <div className="grid grid-cols-2 gap-4 mb-4 text-sm">
                  <div>
                    <span className="text-gray-500">Family:</span>
                    <div className="font-medium text-gray-900">{sample.familyName || 'Unknown'}</div>
                  </div>
                  <div>
                    <span className="text-gray-500">Size:</span>
                    <div className="font-medium text-gray-900">{formatFileSize(sample.fileSize)}</div>
                  </div>
                  <div>
                    <span className="text-gray-500">Type:</span>
                    <div className="font-medium text-gray-900">{sample.mimeType}</div>
                  </div>
                  <div>
                    <span className="text-gray-500">Detection:</span>
                    <div className="font-medium text-gray-900">{sample.detectionRate.toFixed(1)}%</div>
                  </div>
                </div>

                {/* Detection Rate Bar */}
                <div className="mb-4">
                  <div className="flex justify-between text-sm mb-1">
                    <span className="text-gray-600">Detection Rate</span>
                    <span className="font-medium">{sample.detectionRate.toFixed(1)}%</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div 
                      className={`h-2 rounded-full ${
                        sample.detectionRate >= 80 ? 'bg-red-500' :
                        sample.detectionRate >= 60 ? 'bg-orange-500' :
                        sample.detectionRate >= 40 ? 'bg-yellow-500' : 'bg-green-500'
                      }`}
                      style={{ width: `${sample.detectionRate}%` }}
                    ></div>
                  </div>
                </div>

                {/* Hashes */}
                <div className="mb-4">
                  <h4 className="text-sm font-medium text-gray-700 mb-2">File Hashes</h4>
                  <div className="space-y-1 text-xs">
                    <div className="flex">
                      <span className="text-gray-500 w-12">MD5:</span>
                      <span className="font-mono text-gray-700">{sample.fileHash.md5}</span>
                    </div>
                    <div className="flex">
                      <span className="text-gray-500 w-12">SHA1:</span>
                      <span className="font-mono text-gray-700">{sample.fileHash.sha1}</span>
                    </div>
                    <div className="flex">
                      <span className="text-gray-500 w-12">SHA256:</span>
                      <span className="font-mono text-gray-700 break-all">{sample.fileHash.sha256}</span>
                    </div>
                  </div>
                </div>

                {/* Analysis Status */}
                <div className="mb-4">
                  <h4 className="text-sm font-medium text-gray-700 mb-2">Analysis Status</h4>
                  <div className="flex space-x-2">
                    <span className={`text-xs px-2 py-1 rounded ${
                      sample.analysisResults.static ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-500'
                    }`}>
                      Static {sample.analysisResults.static ? '✓' : '○'}
                    </span>
                    <span className={`text-xs px-2 py-1 rounded ${
                      sample.analysisResults.dynamic ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-500'
                    }`}>
                      Dynamic {sample.analysisResults.dynamic ? '✓' : '○'}
                    </span>
                    <span className={`text-xs px-2 py-1 rounded ${
                      sample.analysisResults.sandbox ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-500'
                    }`}>
                      Sandbox {sample.analysisResults.sandbox ? '✓' : '○'}
                    </span>
                  </div>
                </div>

                {/* YARA Rules */}
                {sample.yara.length > 0 && (
                  <div className="mb-4">
                    <h4 className="text-sm font-medium text-gray-700 mb-2">YARA Matches</h4>
                    <div className="flex flex-wrap gap-1">
                      {sample.yara.slice(0, 3).map((rule, index) => (
                        <span key={index} className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded">
                          {rule}
                        </span>
                      ))}
                      {sample.yara.length > 3 && (
                        <span className="text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded">
                          +{sample.yara.length - 3} more
                        </span>
                      )}
                    </div>
                  </div>
                )}

                {/* Timestamps */}
                <div className="flex justify-between items-center text-xs text-gray-500 mb-4">
                  <span>First: {new Date(sample.firstSeen).toLocaleDateString()}</span>
                  <span>Last: {new Date(sample.lastSeen).toLocaleDateString()}</span>
                </div>

                {/* Actions */}
                <div className="flex space-x-2">
                  <button className="flex-1 text-xs bg-blue-100 text-blue-700 px-3 py-2 rounded hover:bg-blue-200 transition-colors">
                    Analyze
                  </button>
                  <button className="flex-1 text-xs bg-green-100 text-green-700 px-3 py-2 rounded hover:bg-green-200 transition-colors">
                    Download
                  </button>
                  <button className="flex-1 text-xs bg-red-100 text-red-700 px-3 py-2 rounded hover:bg-red-200 transition-colors">
                    Quarantine
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Notifications */}
      {notifications && notifications.length > 0 && (
        <div className="fixed bottom-4 right-4 space-y-2">
          {notifications.map((notification, index) => (
            <div
              key={notification.id || index}
              className={`p-4 rounded-lg shadow-lg max-w-sm ${
                notification.type === 'success' ? 'bg-green-100 text-green-800' :
                notification.type === 'error' ? 'bg-red-100 text-red-800' :
                'bg-blue-100 text-blue-800'
              }`}
            >
              <div className="flex justify-between items-start">
                <span>{notification.message}</span>
                <button
                  onClick={() => removeNotification(notification.id || index.toString())}
                  className="ml-2 text-gray-500 hover:text-gray-700"
                >
                  ×
                </button>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}
#!/usr/bin/env node

/**
 * Phantom CVE Core Plugin Demo
 * Demonstrates multi-database capabilities for business SaaS readiness
 */

import { 
  initializePhantomCVECore, 
  getCVECoreStatus, 
  healthCheckCVECore,
  generateSetupGuide 
} from '../src/plugins/cveCore.js';
import { 
  loadCVECoreConfig, 
  validateConfiguration, 
  getConfigurationSummary 
} from '../src/config/cveDataConfig.js';

console.log('🔧 Phantom CVE Core Plugin Demo');
console.log('=====================================\n');

async function runDemo() {
  try {
    // 1. Load and display configuration
    console.log('📋 Step 1: Loading Configuration...');
    const config = loadCVECoreConfig();
    console.log('✅ Configuration loaded successfully');
    
    const enabledDatabases = Object.keys(config.databases).filter(db => 
      config.databases[db as keyof typeof config.databases]?.enabled
    );
    
    console.log(`   📊 Enabled databases: ${enabledDatabases.join(', ') || 'None'}`);
    console.log(`   🎯 Read preference: ${config.dataStrategy?.readPreference}`);
    console.log(`   ✍️  Write strategy: ${config.dataStrategy?.writeStrategy}\n`);

    // 2. Validate configuration
    console.log('🔍 Step 2: Validating Configuration...');
    const validation = validateConfiguration(config);
    
    if (validation.isValid) {
      console.log('✅ Configuration validation passed');
    } else {
      console.log('❌ Configuration validation failed');
      validation.errors.forEach(error => console.log(`   ❗ Error: ${error}`));
    }
    
    if (validation.warnings.length > 0) {
      console.log('   ⚠️  Warnings:');
      validation.warnings.forEach(warning => console.log(`     - ${warning}`));
    }
    
    if (validation.recommendations.length > 0) {
      console.log('   💡 Recommendations:');
      validation.recommendations.forEach(rec => console.log(`     - ${rec}`));
    }
    console.log('');

    // 3. Get business SaaS readiness assessment
    console.log('🏢 Step 3: Business SaaS Readiness Assessment...');
    const summary = getConfigurationSummary(config);
    
    console.log(`   📈 Readiness Level: ${summary.businessSaasReadiness.level.toUpperCase()}`);
    console.log(`   🎯 Readiness Score: ${summary.businessSaasReadiness.score}/100`);
    console.log('   🎛️  Features:');
    
    Object.entries(summary.businessSaasReadiness.features).forEach(([feature, enabled]) => {
      const icon = enabled ? '✅' : '❌';
      console.log(`     ${icon} ${feature.replace(/([A-Z])/g, ' $1').toLowerCase()}`);
    });
    console.log('');

    // 4. Display capabilities
    console.log('🚀 Step 4: Available Capabilities...');
    summary.capabilities.forEach(capability => {
      console.log(`   ✨ ${capability.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}`);
    });
    console.log('');

    // 5. Attempt to initialize (will show what would happen)
    console.log('🔌 Step 5: Plugin Initialization Preview...');
    
    if (enabledDatabases.length === 0) {
      console.log('   ⚠️  No databases configured - would run in fallback mode');
      console.log('   💡 Configure databases via environment variables for full functionality');
    } else {
      console.log(`   🎯 Would initialize with ${enabledDatabases.length} database(s):`);
      enabledDatabases.forEach(db => {
        const role = config.databases[db as keyof typeof config.databases]?.role;
        console.log(`     📦 ${db.toUpperCase()} (${role})`);
      });
    }
    console.log('');

    // 6. Health check
    console.log('🏥 Step 6: Health Check...');
    const health = await healthCheckCVECore();
    console.log(`   Status: ${health.status === 'healthy' ? '✅ Healthy' : '❌ Unhealthy'}`);
    console.log(`   Plugin: ${health.plugin || 'phantom-cve-core'} v${health.version || '1.0.0'}`);
    console.log('');

    // 7. Show setup guide
    console.log('📚 Step 7: Setup Guide Available...');
    const guide = generateSetupGuide();
    console.log(`   📖 ${guide.title}`);
    console.log(`   📝 ${guide.steps.length} setup steps provided`);
    console.log('   🔗 Full guide: docs/cve-plugin-setup.md\n');

    // 8. Example usage
    console.log('💡 Step 8: Example Usage...');
    console.log('   // In your application startup:');
    console.log('   import { initializePhantomCVECore } from "./src/plugins/cveCore.js";');
    console.log('');
    console.log('   const result = await initializePhantomCVECore();');
    console.log('   if (result.success) {');
    console.log('     console.log("CVE Core ready for business!");');
    console.log('   }');
    console.log('');

    // 9. Database setup examples
    console.log('🗄️  Step 9: Database Setup Examples...');
    console.log('   Docker Compose:');
    console.log('   docker-compose up -d postgres mongodb redis elasticsearch');
    console.log('');
    console.log('   Environment Variables:');
    console.log('   MONGODB_URI=mongodb://admin:pass@localhost:27017/phantom_spire');
    console.log('   POSTGRESQL_URI=postgresql://postgres:pass@localhost:5432/phantom_spire');
    console.log('   REDIS_URL=redis://:pass@localhost:6379/0');
    console.log('   ELASTICSEARCH_URL=http://localhost:9200');
    console.log('');

    // 10. Summary
    console.log('📊 Summary');
    console.log('=====================================');
    console.log(`Business SaaS Readiness: ${summary.businessSaasReadiness.level.toUpperCase()} (${summary.businessSaasReadiness.score}/100)`);
    console.log(`Multi-Database Support: ${summary.businessSaasReadiness.features.multiDatabase ? 'Enabled' : 'Disabled'}`);
    console.log(`Intelligent Caching: ${summary.businessSaasReadiness.features.intelligentCaching ? 'Enabled' : 'Disabled'}`);
    console.log(`Advanced Search: ${summary.businessSaasReadiness.features.advancedSearch ? 'Enabled' : 'Disabled'}`);
    console.log(`Relational Analytics: ${summary.businessSaasReadiness.features.relationalAnalytics ? 'Enabled' : 'Disabled'}`);
    console.log('');
    
    if (summary.businessSaasReadiness.level === 'enterprise') {
      console.log('🎉 Congratulations! Your configuration is enterprise-ready.');
    } else if (summary.businessSaasReadiness.level === 'professional') {
      console.log('👍 Good configuration for professional use. Consider adding more databases for enterprise features.');
    } else {
      console.log('🔧 Basic configuration detected. Configure additional databases for enhanced capabilities.');
    }
    
    console.log('\n✨ Phantom CVE Core Plugin Demo Complete!');
    
  } catch (error) {
    console.error('❌ Demo failed:', error);
    process.exit(1);
  }
}

// Run the demo
runDemo().catch(console.error);
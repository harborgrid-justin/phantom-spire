/**
 * Malware Execution Analysis
 * Comprehensive analysis of malware deployment and execution vectors
 */

import React, { useState, useEffect, useMemo, useCallback } from 'react';
import {
  Box,
  Grid,
  Card,
  CardContent,
  Typography,
  Button,
  IconButton,
  Chip,
  Avatar,
  LinearProgress,
  Alert,
  Tooltip,
  useTheme,
  alpha,
  Paper,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  TablePagination,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  CircularProgress,
  Tabs,
  Tab,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Badge,
  Accordion,
  AccordionSummary,
  AccordionDetails,
} from '@mui/material';

import {
  BugReport,
  Security,
  Warning,
  Assessment,
  TrendingUp,
  Shield,
  Visibility,
  Search,
  Refresh,
  OpenInNew,
  CheckCircle,
  Error,
  Computer,
  Memory,
  Storage,
  ExpandMore,
  FileCopy,
  Build,
  Settings,
  CloudDownload,
  Lock,
  VpnKey,
} from '@mui/icons-material';

// Interfaces
interface MalwareVector {
  id: string;
  name: string;
  malware_family: string;
  deployment_method: 'email' | 'web' | 'usb' | 'network' | 'supply_chain' | 'insider' | 'social_engineering';
  execution_type: 'file_based' | 'fileless' | 'memory_only' | 'registry_based' | 'living_off_land';
  platform_targets: string[];
  severity: 'low' | 'medium' | 'high' | 'critical';
  description: string;
  attack_chain: string[];
  persistence_mechanisms: string[];
  evasion_techniques: string[];
  payload_capabilities: string[];
  c2_mechanisms: string[];
  data_exfiltration_methods: string[];
  propagation_vectors: string[];
  anti_analysis_features: string[];
  detection_indicators: string[];
  kill_chain_phases: string[];
  mitigation_strategies: string[];
  associated_actors: string[];
  campaign_usage: string[];
  technical_sophistication: 'low' | 'medium' | 'high' | 'advanced';
  operational_impact: number;
  detection_difficulty: number;
  recovery_complexity: number;
  financial_impact_estimate: string;
  first_observed: Date;
  last_activity: Date;
  global_prevalence: number;
}

interface MalwareSample {
  id: string;
  sample_name: string;
  file_hash: string;
  file_type: string;
  file_size: number;
  family_classification: string;
  infection_vector: string;
  packer_used?: string;
  encryption_methods: string[];
  behavioral_analysis: string[];
  static_analysis_results: string[];
  dynamic_analysis_results: string[];
  network_communications: string[];
  file_operations: string[];
  registry_modifications: string[];
  process_injections: string[];
  privilege_escalations: string[];
  sandbox_evasion: string[];
  attribution_indicators: string[];
  yara_rules: string[];
  iocs: string[];
}

interface MalwareCampaign {
  id: string;
  campaign_name: string;
  threat_actor_group: string;
  campaign_start: Date;
  campaign_end?: Date;
  primary_malware_families: string[];
  target_sectors: string[];
  geographic_targeting: string[];
  infection_vectors_used: string[];
  victims_count: number;
  estimated_financial_damage: string;
  detection_timeline: string;
  response_effectiveness: number;
  attribution_confidence: 'low' | 'medium' | 'high' | 'very_high';
  campaign_objectives: string[];
  infrastructure_analysis: string[];
  defensive_measures_bypassed: string[];
}

interface MalwareMetrics {
  total_vectors: number;
  active_malware_families: number;
  ongoing_campaigns: number;
  critical_threats: number;
  detection_rate: number;
  avg_dwell_time: number;
  most_targeted_sectors: string[];
  top_deployment_methods: string[];
  execution_type_distribution: { [key: string]: number };
  platform_distribution: { [key: string]: number };
  sophistication_levels: { [key: string]: number };
}

const MalwareExecutionAnalysis: React.FC = () => {
  const theme = useTheme();
  
  // State management
  const [vectors, setVectors] = useState<MalwareVector[]>([]);
  const [samples, setSamples] = useState<MalwareSample[]>([]);
  const [campaigns, setCampaigns] = useState<MalwareCampaign[]>([]);
  const [metrics, setMetrics] = useState<MalwareMetrics | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  // Selection states
  const [selectedVector, setSelectedVector] = useState<MalwareVector | null>(null);
  const [selectedSample, setSelectedSample] = useState<MalwareSample | null>(null);
  
  // UI states
  const [activeTab, setActiveTab] = useState(0);
  const [detailsOpen, setDetailsOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterDeployment, setFilterDeployment] = useState<string>('all');
  const [filterExecution, setFilterExecution] = useState<string>('all');
  const [filterSeverity, setFilterSeverity] = useState<string>('all');
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(10);

  // Simulated data generation
  const generateMalwareData = useCallback(() => {
    const deploymentMethods = ['email', 'web', 'usb', 'network', 'supply_chain', 'insider', 'social_engineering'] as const;
    const executionTypes = ['file_based', 'fileless', 'memory_only', 'registry_based', 'living_off_land'] as const;
    const severityLevels = ['low', 'medium', 'high', 'critical'] as const;
    const sophisticationLevels = ['low', 'medium', 'high', 'advanced'] as const;
    const platforms = ['Windows', 'Linux', 'macOS', 'Android', 'iOS'];
    const malwareFamilies = [
      'Emotet', 'TrickBot', 'Ryuk', 'Maze', 'Cobalt Strike', 'Metasploit',
      'APT1', 'Lazarus', 'FIN7', 'Carbanak', 'DarkHalo', 'SolarWinds'
    ];

    // Generate malware vectors
    const vectorData: MalwareVector[] = [];
    for (let i = 0; i < 28; i++) {
      const deployment = deploymentMethods[Math.floor(Math.random() * deploymentMethods.length)];
      const execution = executionTypes[Math.floor(Math.random() * executionTypes.length)];
      const severity = severityLevels[Math.floor(Math.random() * severityLevels.length)];
      const sophistication = sophisticationLevels[Math.floor(Math.random() * sophisticationLevels.length)];
      const family = malwareFamilies[Math.floor(Math.random() * malwareFamilies.length)];
      
      vectorData.push({
        id: `vector-${i + 1}`,
        name: `${family} ${execution.replace('_', ' ')} Vector ${i + 1}`,
        malware_family: family,
        deployment_method: deployment,
        execution_type: execution,
        platform_targets: platforms.slice(0, Math.floor(Math.random() * 3) + 1),
        severity: severity as any,
        description: `Advanced ${family} malware deployment using ${deployment} vector with ${execution} execution`,
        attack_chain: [
          'Initial Access',
          'Execution',
          'Persistence',
          'Privilege Escalation',
          'Defense Evasion',
          'Credential Access',
          'Discovery',
          'Lateral Movement',
          'Collection',
          'Exfiltration'
        ].slice(0, Math.floor(Math.random() * 6) + 4),
        persistence_mechanisms: [
          'Registry Run Keys',
          'Scheduled Tasks',
          'Windows Services',
          'WMI Event Subscription',
          'Startup Folders',
          'DLL Hijacking'
        ],
        evasion_techniques: [
          'Process Injection',
          'DLL Side-Loading',
          'Reflective DLL Loading',
          'Process Hollowing',
          'Anti-VM Techniques',
          'Timestomping'
        ],
        payload_capabilities: [
          'Remote Access',
          'Data Theft',
          'Keylogging',
          'Screen Capture',
          'File Encryption',
          'Cryptocurrency Mining'
        ],
        c2_mechanisms: [
          'HTTP/HTTPS',
          'DNS Tunneling',
          'P2P Networks',
          'Social Media',
          'Encrypted Channels',
          'Domain Generation Algorithms'
        ],
        data_exfiltration_methods: [
          'Email Exfiltration',
          'Cloud Storage Upload',
          'FTP Transfer',
          'Steganography',
          'DNS Exfiltration',
          'Physical Media'
        ],
        propagation_vectors: [
          'Network Shares',
          'Email Distribution',
          'USB Propagation',
          'Exploit Kits',
          'Software Vulnerabilities',
          'Social Engineering'
        ],
        anti_analysis_features: [
          'Anti-Debugging',
          'Anti-VM Detection',
          'Sandbox Evasion',
          'Code Obfuscation',
          'Packing/Encryption',
          'Time-based Evasion'
        ],
        detection_indicators: [
          'Network Traffic Anomalies',
          'Process Injection Events',
          'Unusual File Operations',
          'Registry Modifications',
          'Memory Artifacts',
          'Behavioral Patterns'
        ],
        kill_chain_phases: [
          'Reconnaissance',
          'Weaponization',
          'Delivery',
          'Exploitation',
          'Installation',
          'Command & Control',
          'Actions on Objectives'
        ],
        mitigation_strategies: [
          'Email Security Gateways',
          'Endpoint Detection and Response',
          'Network Segmentation',
          'Application Whitelisting',
          'User Education',
          'Threat Intelligence Integration'
        ],
        associated_actors: [
          `APT-${Math.floor(Math.random() * 50) + 1}`,
          'Lazarus Group',
          'FIN7',
          'Carbanak'
        ].slice(0, Math.floor(Math.random() * 3) + 1),
        campaign_usage: [
          'Operation Aurora',
          'SolarWinds Supply Chain Attack',
          'NotPetya Campaign',
          'WannaCry Outbreak'
        ].slice(0, Math.floor(Math.random() * 2) + 1),
        technical_sophistication: sophistication,
        operational_impact: Math.floor(Math.random() * 10) + 1,
        detection_difficulty: Math.floor(Math.random() * 10) + 1,
        recovery_complexity: Math.floor(Math.random() * 10) + 1,
        financial_impact_estimate: `$${Math.floor(Math.random() * 100) + 10}M`,
        first_observed: new Date(Date.now() - Math.random() * 1000 * 24 * 60 * 60 * 1000),
        last_activity: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000),
        global_prevalence: Math.floor(Math.random() * 100) + 5
      });
    }

    // Generate malware samples
    const sampleData: MalwareSample[] = [];
    for (let i = 0; i < 15; i++) {
      const family = malwareFamilies[Math.floor(Math.random() * malwareFamilies.length)];
      
      sampleData.push({
        id: `sample-${i + 1}`,
        sample_name: `${family}_sample_${i + 1}`,
        file_hash: `${Math.random().toString(36).substr(2, 32)}`,
        file_type: ['.exe', '.dll', '.doc', '.pdf', '.js', '.vbs'][Math.floor(Math.random() * 6)],
        file_size: Math.floor(Math.random() * 10000000) + 100000,
        family_classification: family,
        infection_vector: deploymentMethods[Math.floor(Math.random() * deploymentMethods.length)],
        packer_used: Math.random() > 0.5 ? ['UPX', 'ASPack', 'Themida', 'VMProtect'][Math.floor(Math.random() * 4)] : undefined,
        encryption_methods: [
          'AES Encryption',
          'XOR Obfuscation',
          'RC4 Encryption',
          'Custom Encryption'
        ].slice(0, Math.floor(Math.random() * 3) + 1),
        behavioral_analysis: [
          'Creates persistence mechanisms',
          'Establishes C2 communication',
          'Performs privilege escalation',
          'Injects into legitimate processes',
          'Modifies system configurations'
        ],
        static_analysis_results: [
          'Packed executable detected',
          'Suspicious string patterns',
          'Import table anomalies',
          'Code obfuscation present'
        ],
        dynamic_analysis_results: [
          'Network connections to suspicious IPs',
          'Registry key modifications',
          'File system operations',
          'Process injection behavior'
        ],
        network_communications: [
          'HTTP POST to C2 server',
          'DNS queries to suspicious domains',
          'Encrypted traffic patterns',
          'Beacon communication'
        ],
        file_operations: [
          'Creates temporary files',
          'Modifies system files',
          'Deletes log files',
          'Encrypts user documents'
        ],
        registry_modifications: [
          'Creates startup entries',
          'Modifies security settings',
          'Installs malicious services',
          'Changes firewall rules'
        ],
        process_injections: [
          'Explorer.exe injection',
          'Svchost.exe injection',
          'Browser process injection',
          'Legitimate application hijacking'
        ],
        privilege_escalations: [
          'UAC bypass techniques',
          'Token manipulation',
          'Service exploitation',
          'Kernel exploits'
        ],
        sandbox_evasion: [
          'VM detection',
          'Debugger detection',
          'Sleep delays',
          'Environment checks'
        ],
        attribution_indicators: [
          'Code similarities to known malware',
          'Infrastructure overlaps',
          'TTP patterns',
          'Language artifacts'
        ],
        yara_rules: [
          'family_detection_rule',
          'behavior_pattern_rule',
          'string_signature_rule'
        ],
        iocs: [
          'C2 domain names',
          'File hashes',
          'Registry keys',
          'Network signatures'
        ]
      });
    }

    // Generate malware campaigns
    const campaignData: MalwareCampaign[] = [];
    for (let i = 0; i < 10; i++) {
      const startDate = new Date(Date.now() - Math.random() * 730 * 24 * 60 * 60 * 1000);
      
      campaignData.push({
        id: `campaign-${i + 1}`,
        campaign_name: `Malware Campaign ${i + 1}`,
        threat_actor_group: `APT-${Math.floor(Math.random() * 50) + 1}`,
        campaign_start: startDate,
        campaign_end: Math.random() > 0.4 ? new Date(startDate.getTime() + Math.random() * 365 * 24 * 60 * 60 * 1000) : undefined,
        primary_malware_families: malwareFamilies.slice(0, Math.floor(Math.random() * 3) + 1),
        target_sectors: [
          'Financial Services',
          'Healthcare',
          'Government',
          'Technology',
          'Manufacturing',
          'Energy'
        ].slice(0, Math.floor(Math.random() * 3) + 1),
        geographic_targeting: [
          'North America',
          'Europe',
          'Asia-Pacific',
          'Global'
        ].slice(0, Math.floor(Math.random() * 3) + 1),
        infection_vectors_used: deploymentMethods.slice(0, Math.floor(Math.random() * 4) + 1),
        victims_count: Math.floor(Math.random() * 100000) + 1000,
        estimated_financial_damage: `$${Math.floor(Math.random() * 1000) + 50}M`,
        detection_timeline: `${Math.floor(Math.random() * 200) + 10} days`,
        response_effectiveness: Math.floor(Math.random() * 80) + 20,
        attribution_confidence: ['low', 'medium', 'high', 'very_high'][Math.floor(Math.random() * 4)] as any,
        campaign_objectives: [
          'Data theft',
          'Financial fraud',
          'Espionage',
          'Ransomware deployment',
          'Infrastructure disruption'
        ].slice(0, Math.floor(Math.random() * 3) + 1),
        infrastructure_analysis: [
          'Command and control servers',
          'Domain generation algorithms',
          'Fast flux networks',
          'Bulletproof hosting'
        ],
        defensive_measures_bypassed: [
          'Antivirus evasion',
          'Firewall circumvention',
          'Email security bypass',
          'Endpoint protection evasion'
        ]
      });
    }

    // Generate metrics
    const executionDist = executionTypes.reduce((acc, type) => {
      acc[type] = vectorData.filter(v => v.execution_type === type).length;
      return acc;
    }, {} as { [key: string]: number });

    const platformDist = platforms.reduce((acc, platform) => {
      acc[platform] = vectorData.filter(v => v.platform_targets.includes(platform)).length;
      return acc;
    }, {} as { [key: string]: number });

    const sophisticationDist = sophisticationLevels.reduce((acc, level) => {
      acc[level] = vectorData.filter(v => v.technical_sophistication === level).length;
      return acc;
    }, {} as { [key: string]: number });

    const metricsData: MalwareMetrics = {
      total_vectors: vectorData.length,
      active_malware_families: [...new Set(vectorData.map(v => v.malware_family))].length,
      ongoing_campaigns: campaignData.filter(c => !c.campaign_end).length,
      critical_threats: vectorData.filter(v => v.severity === 'critical').length,
      detection_rate: Math.floor(Math.random() * 30) + 65,
      avg_dwell_time: Math.floor(Math.random() * 200) + 50,
      most_targeted_sectors: ['Finance', 'Healthcare', 'Government', 'Technology'],
      top_deployment_methods: ['email', 'web', 'network'],
      execution_type_distribution: executionDist,
      platform_distribution: platformDist,
      sophistication_levels: sophisticationDist
    };

    setVectors(vectorData);
    setSamples(sampleData);
    setCampaigns(campaignData);
    setMetrics(metricsData);
    setLoading(false);
  }, []);

  useEffect(() => {
    generateMalwareData();
  }, [generateMalwareData]);

  // Filtered data
  const filteredVectors = useMemo(() => {
    return vectors.filter(vector => {
      const matchesSearch = vector.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                           vector.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
                           vector.malware_family.toLowerCase().includes(searchTerm.toLowerCase());
      const matchesDeployment = filterDeployment === 'all' || vector.deployment_method === filterDeployment;
      const matchesExecution = filterExecution === 'all' || vector.execution_type === filterExecution;
      const matchesSeverity = filterSeverity === 'all' || vector.severity === filterSeverity;
      
      return matchesSearch && matchesDeployment && matchesExecution && matchesSeverity;
    });
  }, [vectors, searchTerm, filterDeployment, filterExecution, filterSeverity]);

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return theme.palette.error.main;
      case 'high': return '#ff9800';
      case 'medium': return theme.palette.warning.main;
      case 'low': return theme.palette.success.main;
      default: return theme.palette.grey[500];
    }
  };

  const getExecutionIcon = (type: string) => {
    switch (type) {
      case 'file_based': return <FileCopy />;
      case 'fileless': return <Memory />;
      case 'memory_only': return <Storage />;
      case 'registry_based': return <Settings />;
      case 'living_off_land': return <Build />;
      default: return <BugReport />;
    }
  };

  const getSophisticationColor = (level: string) => {
    switch (level) {
      case 'advanced': return theme.palette.error.main;
      case 'high': return '#ff9800';
      case 'medium': return theme.palette.warning.main;
      case 'low': return theme.palette.success.main;
      default: return theme.palette.grey[500];
    }
  };

  // Render overview metrics
  const renderOverviewMetrics = () => (
    <Grid container spacing={3} sx={{ mb: 3 }}>
      {[
        { label: 'Total Vectors', value: metrics?.total_vectors || 0, icon: <BugReport />, color: theme.palette.primary.main },
        { label: 'Active Families', value: metrics?.active_malware_families || 0, icon: <Assessment />, color: theme.palette.info.main },
        { label: 'Critical Threats', value: metrics?.critical_threats || 0, icon: <Warning />, color: theme.palette.error.main },
        { label: 'Detection Rate', value: `${metrics?.detection_rate || 0}%`, icon: <Shield />, color: theme.palette.success.main }
      ].map((metric, index) => (
        <Grid item xs={12} sm={6} lg={3} key={index}>
          <Card>
            <CardContent>
              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                <Box>
                  <Typography variant="h4" fontWeight="bold">
                    {metric.value}
                  </Typography>
                  <Typography variant="body2" color="textSecondary">
                    {metric.label}
                  </Typography>
                </Box>
                <Avatar sx={{ bgcolor: alpha(metric.color, 0.1), color: metric.color }}>
                  {metric.icon}
                </Avatar>
              </Box>
            </CardContent>
          </Card>
        </Grid>
      ))}
    </Grid>
  );

  // Render vectors table
  const renderVectorsTable = () => (
    <TableContainer component={Paper}>
      <Table>
        <TableHead>
          <TableRow>
            <TableCell>Malware Vector</TableCell>
            <TableCell>Family</TableCell>
            <TableCell>Deployment</TableCell>
            <TableCell>Execution Type</TableCell>
            <TableCell>Severity</TableCell>
            <TableCell>Sophistication</TableCell>
            <TableCell>Impact</TableCell>
            <TableCell>Actions</TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          {filteredVectors
            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
            .map((vector) => (
              <TableRow key={vector.id} hover>
                <TableCell>
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                    {getExecutionIcon(vector.execution_type)}
                    <Typography variant="body2">{vector.name}</Typography>
                  </Box>
                </TableCell>
                <TableCell>
                  <Chip size="small" label={vector.malware_family} />
                </TableCell>
                <TableCell>
                  <Chip size="small" label={vector.deployment_method.replace('_', ' ')} variant="outlined" />
                </TableCell>
                <TableCell>
                  <Chip size="small" label={vector.execution_type.replace('_', ' ')} />
                </TableCell>
                <TableCell>
                  <Chip
                    size="small"
                    label={vector.severity}
                    sx={{
                      bgcolor: alpha(getSeverityColor(vector.severity), 0.1),
                      color: getSeverityColor(vector.severity)
                    }}
                  />
                </TableCell>
                <TableCell>
                  <Chip
                    size="small"
                    label={vector.technical_sophistication}
                    sx={{
                      bgcolor: alpha(getSophisticationColor(vector.technical_sophistication), 0.1),
                      color: getSophisticationColor(vector.technical_sophistication)
                    }}
                  />
                </TableCell>
                <TableCell>
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                    <LinearProgress
                      variant="determinate"
                      value={vector.operational_impact * 10}
                      sx={{ flexGrow: 1, height: 6, borderRadius: 3 }}
                      color={vector.operational_impact > 7 ? 'error' : vector.operational_impact > 4 ? 'warning' : 'success'}
                    />
                    <Typography variant="caption">{vector.operational_impact}/10</Typography>
                  </Box>
                </TableCell>
                <TableCell>
                  <IconButton
                    size="small"
                    onClick={() => {
                      setSelectedVector(vector);
                      setDetailsOpen(true);
                    }}
                  >
                    <Visibility />
                  </IconButton>
                </TableCell>
              </TableRow>
            ))}
        </TableBody>
      </Table>
      <TablePagination
        component="div"
        count={filteredVectors.length}
        page={page}
        onPageChange={(_, newPage) => setPage(newPage)}
        rowsPerPage={rowsPerPage}
        onRowsPerPageChange={(event) => {
          setRowsPerPage(parseInt(event.target.value, 10));
          setPage(0);
        }}
      />
    </TableContainer>
  );

  // Render malware samples
  const renderSamples = () => (
    <Grid container spacing={3}>
      {samples.map((sample) => (
        <Grid item xs={12} md={6} key={sample.id}>
          <Card 
            sx={{ 
              cursor: 'pointer',
              transition: 'all 0.3s ease',
              '&:hover': {
                transform: 'translateY(-2px)',
                boxShadow: theme.shadows[4],
              }
            }}
            onClick={() => {
              setSelectedSample(sample);
              setDetailsOpen(true);
            }}
          >
            <CardContent>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'start', mb: 2 }}>
                <Typography variant="h6" gutterBottom>
                  {sample.sample_name}
                </Typography>
                <Chip size="small" label={sample.family_classification} />
              </Box>
              <Box sx={{ mb: 2, bgcolor: theme.palette.grey[100], p: 1, borderRadius: 1 }}>
                <Typography variant="caption" fontFamily="monospace" sx={{ wordBreak: 'break-all' }}>
                  {sample.file_hash}
                </Typography>
              </Box>
              <Box sx={{ mb: 2 }}>
                <Typography variant="caption" display="block">
                  File Type: {sample.file_type}
                </Typography>
                <Typography variant="caption" display="block">
                  Size: {(sample.file_size / 1024 / 1024).toFixed(2)} MB
                </Typography>
                <Typography variant="caption" display="block">
                  Vector: {sample.infection_vector.replace('_', ' ')}
                </Typography>
                {sample.packer_used && (
                  <Typography variant="caption" display="block">
                    Packer: {sample.packer_used}
                  </Typography>
                )}
              </Box>
              <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>
                {sample.encryption_methods.slice(0, 2).map((method) => (
                  <Chip key={method} size="small" label={method} variant="outlined" />
                ))}
              </Box>
            </CardContent>
          </Card>
        </Grid>
      ))}
    </Grid>
  );

  // Render campaigns
  const renderCampaigns = () => (
    <Grid container spacing={3}>
      {campaigns.map((campaign) => (
        <Grid item xs={12} md={6} lg={4} key={campaign.id}>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                {campaign.campaign_name}
              </Typography>
              <Typography variant="body2" color="textSecondary" gutterBottom>
                Actor: {campaign.threat_actor_group}
              </Typography>
              <Box sx={{ mb: 2 }}>
                <Typography variant="caption" display="block">
                  Victims: {campaign.victims_count.toLocaleString()}
                </Typography>
                <Typography variant="caption" display="block">
                  Financial Damage: {campaign.estimated_financial_damage}
                </Typography>
                <Typography variant="caption" display="block">
                  Detection Time: {campaign.detection_timeline}
                </Typography>
                <Typography variant="caption" display="block">
                  Attribution: {campaign.attribution_confidence}
                </Typography>
              </Box>
              <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap', mb: 1 }}>
                {campaign.primary_malware_families.slice(0, 2).map((family) => (
                  <Chip key={family} size="small" label={family} />
                ))}
              </Box>
              <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>
                {campaign.campaign_objectives.slice(0, 2).map((objective) => (
                  <Chip key={objective} size="small" label={objective} variant="outlined" />
                ))}
              </Box>
            </CardContent>
          </Card>
        </Grid>
      ))}
    </Grid>
  );

  if (loading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: 400 }}>
        <CircularProgress />
      </Box>
    );
  }

  if (error) {
    return (
      <Alert severity="error" sx={{ m: 2 }}>
        {error}
      </Alert>
    );
  }

  return (
    <Box sx={{ p: 3 }}>
      <Box sx={{ mb: 3 }}>
        <Typography variant="h4" gutterBottom>
          Malware Execution Analysis
        </Typography>
        <Typography variant="body1" color="textSecondary">
          Comprehensive analysis of malware deployment vectors, execution techniques, and campaign intelligence
        </Typography>
      </Box>

      {renderOverviewMetrics()}

      <Card sx={{ mb: 3 }}>
        <CardContent>
          <Box sx={{ display: 'flex', gap: 2, mb: 3, flexWrap: 'wrap' }}>
            <TextField
              size="small"
              placeholder="Search malware..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              InputProps={{
                startAdornment: <Search />
              }}
              sx={{ minWidth: 200 }}
            />
            <FormControl size="small" sx={{ minWidth: 150 }}>
              <InputLabel>Deployment</InputLabel>
              <Select
                value={filterDeployment}
                onChange={(e) => setFilterDeployment(e.target.value)}
                label="Deployment"
              >
                <MenuItem value="all">All Methods</MenuItem>
                <MenuItem value="email">Email</MenuItem>
                <MenuItem value="web">Web</MenuItem>
                <MenuItem value="usb">USB</MenuItem>
                <MenuItem value="network">Network</MenuItem>
                <MenuItem value="supply_chain">Supply Chain</MenuItem>
                <MenuItem value="insider">Insider</MenuItem>
                <MenuItem value="social_engineering">Social Engineering</MenuItem>
              </Select>
            </FormControl>
            <FormControl size="small" sx={{ minWidth: 150 }}>
              <InputLabel>Execution</InputLabel>
              <Select
                value={filterExecution}
                onChange={(e) => setFilterExecution(e.target.value)}
                label="Execution"
              >
                <MenuItem value="all">All Types</MenuItem>
                <MenuItem value="file_based">File-based</MenuItem>
                <MenuItem value="fileless">Fileless</MenuItem>
                <MenuItem value="memory_only">Memory Only</MenuItem>
                <MenuItem value="registry_based">Registry-based</MenuItem>
                <MenuItem value="living_off_land">Living off Land</MenuItem>
              </Select>
            </FormControl>
            <FormControl size="small" sx={{ minWidth: 120 }}>
              <InputLabel>Severity</InputLabel>
              <Select
                value={filterSeverity}
                onChange={(e) => setFilterSeverity(e.target.value)}
                label="Severity"
              >
                <MenuItem value="all">All Severities</MenuItem>
                <MenuItem value="critical">Critical</MenuItem>
                <MenuItem value="high">High</MenuItem>
                <MenuItem value="medium">Medium</MenuItem>
                <MenuItem value="low">Low</MenuItem>
              </Select>
            </FormControl>
            <Button startIcon={<Refresh />} onClick={generateMalwareData}>
              Refresh
            </Button>
          </Box>

          <Tabs value={activeTab} onChange={(_, newValue) => setActiveTab(newValue)} sx={{ mb: 3 }}>
            <Tab label="Malware Vectors" />
            <Tab label="Sample Analysis" />
            <Tab label="Campaign Intelligence" />
          </Tabs>

          {activeTab === 0 && renderVectorsTable()}
          {activeTab === 1 && renderSamples()}
          {activeTab === 2 && renderCampaigns()}
        </CardContent>
      </Card>

      {/* Details Dialog */}
      <Dialog
        open={detailsOpen}
        onClose={() => setDetailsOpen(false)}
        maxWidth="lg"
        fullWidth
      >
        <DialogTitle>
          {selectedVector?.name || selectedSample?.sample_name}
        </DialogTitle>
        <DialogContent>
          {selectedVector && (
            <Grid container spacing={3}>
              <Grid item xs={12} md={6}>
                <Paper sx={{ p: 2 }}>
                  <Typography variant="h6" gutterBottom>
                    Vector Details
                  </Typography>
                  <Typography variant="body2" paragraph>
                    {selectedVector.description}
                  </Typography>
                  <Box sx={{ mb: 2 }}>
                    <Typography variant="caption" display="block">
                      Family: {selectedVector.malware_family}
                    </Typography>
                    <Typography variant="caption" display="block">
                      Deployment: {selectedVector.deployment_method}
                    </Typography>
                    <Typography variant="caption" display="block">
                      Execution: {selectedVector.execution_type}
                    </Typography>
                    <Typography variant="caption" display="block">
                      Financial Impact: {selectedVector.financial_impact_estimate}
                    </Typography>
                  </Box>
                </Paper>
              </Grid>
              <Grid item xs={12} md={6}>
                <Paper sx={{ p: 2 }}>
                  <Typography variant="h6" gutterBottom>
                    Mitigation Strategies
                  </Typography>
                  <List dense>
                    {selectedVector.mitigation_strategies.slice(0, 6).map((strategy, index) => (
                      <ListItem key={index}>
                        <ListItemIcon>
                          <Shield />
                        </ListItemIcon>
                        <ListItemText primary={strategy} />
                      </ListItem>
                    ))}
                  </List>
                </Paper>
              </Grid>
            </Grid>
          )}
          {selectedSample && (
            <Grid container spacing={3}>
              <Grid item xs={12} md={6}>
                <Paper sx={{ p: 2 }}>
                  <Typography variant="h6" gutterBottom>
                    Sample Analysis
                  </Typography>
                  <Box sx={{ mb: 2, bgcolor: theme.palette.grey[100], p: 1, borderRadius: 1 }}>
                    <Typography variant="caption" fontFamily="monospace">
                      Hash: {selectedSample.file_hash}
                    </Typography>
                  </Box>
                  <Typography variant="body2" paragraph>
                    Family: {selectedSample.family_classification}
                  </Typography>
                  <Typography variant="body2" paragraph>
                    File Type: {selectedSample.file_type}
                  </Typography>
                  <Typography variant="body2" paragraph>
                    Size: {(selectedSample.file_size / 1024 / 1024).toFixed(2)} MB
                  </Typography>
                  {selectedSample.packer_used && (
                    <Typography variant="body2" paragraph>
                      Packer: {selectedSample.packer_used}
                    </Typography>
                  )}
                </Paper>
              </Grid>
              <Grid item xs={12} md={6}>
                <Paper sx={{ p: 2 }}>
                  <Typography variant="h6" gutterBottom>
                    Behavioral Analysis
                  </Typography>
                  <List dense>
                    {selectedSample.behavioral_analysis.slice(0, 5).map((behavior, index) => (
                      <ListItem key={index}>
                        <ListItemIcon>
                          <BugReport />
                        </ListItemIcon>
                        <ListItemText primary={behavior} />
                      </ListItem>
                    ))}
                  </List>
                </Paper>
              </Grid>
            </Grid>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setDetailsOpen(false)}>
            Close
          </Button>
          <Button
            variant="outlined"
            startIcon={<OpenInNew />}
            onClick={() => window.open('https://attack.mitre.org/techniques/T1204/', '_blank')}
          >
            MITRE T1204
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default MalwareExecutionAnalysis;